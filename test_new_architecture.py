"""
–¢–µ—Å—Ç –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã: LLM –Ω–∞ –≤—Ö–æ–¥–µ ‚Üí –ø–æ–∏—Å–∫ ‚Üí –æ—Ç–≤–µ—Ç
"""

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor
import time


def test_new_architecture():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É:
    1. LLM –ø–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    2. –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    3. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ –æ—Ç–≤–µ—Ç
    """
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ –ù–û–í–û–ô –ê–†–•–ò–¢–ï–ö–¢–£–†–´ (LLM ‚Üí –ü–û–ò–°–ö ‚Üí –û–¢–í–ï–¢)")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_loader = DataLoader()
    products = data_loader.get_products()
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\nüîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å LLM –ø–∞—Ä—Å–µ—Ä–æ–º...")
    start_init = time.time()
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm_parser=True,  # ‚úÖ LLM –ø–∞—Ä—Å–µ—Ä –Ω–∞ –≤—Ö–æ–¥–µ
        use_fallback_enhancement=True
    )
    init_time = time.time() - start_init
    print(f"‚úì –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}s)")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        {
            "id": 1,
            "query": "–ö–æ—Ä–æ–± 200x200",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å"
        },
        {
            "id": 2,
            "query": "–ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –∫–æ—Ä–æ–±–∞: –∫–æ—Ä–æ–± 200x200, –∫—Ä—ã—à–∫–∞, 4 –≤–∏–Ω—Ç–∞ –ú6 –∏ 4 –≥–∞–π–∫–∏ –ú6",
            "description": "–ö–æ–º–ø–ª–µ–∫—Ç —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
        },
        {
            "id": 3,
            "query": "–ù—É–∂–µ–Ω –ª–æ—Ç–æ–∫ 600 –º–º —Å –∫—Ä—ã—à–∫–æ–π –∏ –∫—Ä–µ–ø–µ–∂–æ–º",
            "description": "–ù–∞–±–æ—Ä –±–µ–∑ —Ç–æ—á–Ω–æ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"
        }
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    for test_case in test_queries:
        print("\n\n" + "="*70)
        print(f"–¢–ï–°–¢–û–í–´–ô –ó–ê–ü–†–û–° #{test_case['id']}")
        print(f"–û–ø–∏—Å–∞–Ω–∏–µ: {test_case['description']}")
        print("="*70)
        
        start_query = time.time()
        result = processor.process_query(
            query=test_case['query'],
            top_k=3,  # –¢–æ–ø-3 —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–∞ –∫–∞–∂–¥—ã–π —Ç–æ–≤–∞—Ä
            query_id=test_case['id']
        )
        query_time = time.time() - start_query
        
        # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
        print(f"\n{'='*70}")
        print(f"üìä –ò–¢–û–ì–û–í–´–ô –û–¢–í–ï–¢")
        print(f"{'='*70}")
        print(f"–ó–∞–ø—Ä–æ—à–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {result['total_items']}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {result['found_items']}")
        print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']:,.0f} —Ä—É–±.")
        print(f"‚è±Ô∏è  –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {query_time:.2f}s")
        
        # –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è
        print(f"\nüìã –î–ï–¢–ê–õ–ò–ó–ê–¶–ò–Ø –ü–û –ü–û–ó–ò–¶–ò–Ø–ú:")
        print("-" * 70)
        for i, item in enumerate(result['items'], 1):
            print(f"\n{i}. –ó–∞–ø—Ä–æ—à–µ–Ω–æ: {item['requested_item']}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item['quantity']} —à—Ç.")
            
            if item['found_product']:
                prod = item['found_product']
                print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ: {prod.get('name', 'N/A')[:60]}")
                print(f"   üí∞ {item['unit_price']:,.0f} —Ä—É–±. √ó {item['quantity']} = {item['total_price']:,.0f} —Ä—É–±.")
                print(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item['relevance_score']:.4f}")
                
                if item.get('alternatives'):
                    print(f"   üìå –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã:")
                    for alt in item['alternatives'][:2]:
                        print(f"      - {alt['product'].get('name', 'N/A')[:50]} (score: {alt['score']:.4f})")
            else:
                print(f"   ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    print("\n\n" + "="*70)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("="*70)


def test_fallback_mode():
    """
    –¢–µ—Å—Ç fallback —Ä–µ–∂–∏–º–∞ (–±–µ–∑ LLM, —Ç–æ–ª—å–∫–æ QueryEnhancer)
    """
    print("\n\n" + "=" * 70)
    print("üîß –¢–ï–°–¢ FALLBACK –†–ï–ñ–ò–ú–ê (–ë–ï–ó LLM)")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    data_loader = DataLoader()
    products = data_loader.get_products()
    
    # –ü–æ–∏—Å–∫
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    
    # –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –ë–ï–ó LLM
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm_parser=False,  # ‚ùå –ë–ï–ó LLM
        use_fallback_enhancement=True
    )
    
    query = "–ö–æ–º–ø–ª–µ–∫—Ç: –∫–æ—Ä–æ–± 200x200, –∫—Ä—ã—à–∫–∞, –≤–∏–Ω—Ç—ã –ú6"
    result = processor.process_query(query=query, top_k=2, query_id=99)
    
    print(f"\nüí∞ –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']:,.0f} —Ä—É–±.")


if __name__ == "__main__":
    # –û—Å–Ω–æ–≤–Ω–æ–π —Ç–µ—Å—Ç —Å LLM
    test_new_architecture()
    
    # Fallback —Ç–µ—Å—Ç –±–µ–∑ LLM
    # test_fallback_mode()
