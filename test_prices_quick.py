"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ü–µ–Ω —Å —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor


def test_prices_heuristic():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç, —á—Ç–æ —Ü–µ–Ω—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –±–µ—Ä—É—Ç—Å—è –∏–∑ —Å—Ç–æ–ª–±—Ü–∞ '–¶–µ–Ω–∞' (—Ç–µ–ø–µ—Ä—å 'cost')
    –ò—Å–ø–æ–ª—å–∑—É–µ—Ç –±—ã—Å—Ç—Ä—É—é —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é –≤–º–µ—Å—Ç–æ LLM
    """
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ –¶–ï–ù–´ –° –≠–í–†–ò–°–¢–ò–ß–ï–°–ö–û–ô –í–ê–õ–ò–î–ê–¶–ò–ï–ô")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_loader = DataLoader()
    products = data_loader.get_products()
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ —Ü–µ–Ω—ã –∑–∞–≥—Ä—É–∑–∏–ª–∏—Å—å
    print("\nüí∞ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≥—Ä—É–∂–µ–Ω–Ω—ã—Ö —Ü–µ–Ω:")
    products_with_cost = products[products['cost'] > 0]
    products_zero_cost = products[products['cost'] == 0]
    print(f"  –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π > 0: {len(products_with_cost)}")
    print(f"  –¢–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–æ–π = 0: {len(products_zero_cost)}")
    
    if len(products_with_cost) > 0:
        print(f"\n  –ü—Ä–∏–º–µ—Ä—ã —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ü–µ–Ω–∞–º–∏:")
        for idx, row in products_with_cost.head(5).iterrows():
            print(f"    - {row['name'][:50]}: {row['cost']} —Ä—É–±.")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\nüîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ –ë–ï–ó LLM (–±—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º)
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)...")
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm=False,  # –ë—ã—Å—Ç—Ä—ã–π —Ä–µ–∂–∏–º –±–µ–∑ LLM
        use_query_enhancement=True,
        use_llm_validator=True,  # –í–∞–ª–∏–¥–∞—Ç–æ—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç –≤ —ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–æ–º —Ä–µ–∂–∏–º–µ
        use_iterative_search=False
    )
    print("‚úì –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ (—ç–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π —Ä–µ–∂–∏–º)")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        {
            "id": 1,
            "query": "–ì–∞–π–∫–∞ –ú6",
            "complexity": "simple",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å: –∫—Ä–µ–ø—ë–∂"
        },
        {
            "id": 2,
            "query": "–ö–æ—Ä–æ–± 200x200",
            "complexity": "medium",
            "description": "–°—Ä–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å: –∫–∞–±–µ–ª—å–Ω—ã–π –∫–∞–Ω–∞–ª"
        },
        {
            "id": 3,
            "query": "–ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –∫–æ—Ä–æ–±–∞: –∫–æ—Ä–æ–±, –∫—Ä—ã—à–∫–∞, 4 –≤–∏–Ω—Ç–∞ –ú6",
            "complexity": "complex",
            "description": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å: –∫–æ–º–ø–ª–µ–∫—Ç —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º"
        }
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    for test_case in test_queries:
        print("\n" + "=" * 70)
        print(f"üìã –ó–ê–ü–†–û–° #{test_case['id']}")
        print("=" * 70)
        print(f"Query: {test_case['query']}")
        print(f"Complexity: {test_case['complexity']}")
        print(f"Description: {test_case['description']}")
        print("-" * 70)
        
        result = processor.process_query(
            query=test_case['query'],
            top_k=5,
            complexity=test_case['complexity'],
            query_id=test_case['id'],
            use_validation=True
        )
        
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
        print(f"–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {result.get('total_items', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
        if 'results' in result and result['results']:
            print(f"\nüîç –¢–æ–ø-{len(result['results'])} —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤:")
            for i, item in enumerate(result['results'][:5], 1):
                product = item['product']
                score = item['score']
                cost = product.get('cost', 0)
                print(f"\n  {i}. {product.get('name', 'N/A')[:60]}")
                print(f"     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {score:.4f}")
                print(f"     üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {cost:,.2f} —Ä—É–±.")
                print(f"     –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', 'N/A')}")
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
        if 'validation' in result and result['validation']:
            validation = result['validation']
            print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø (—Ä–µ–∂–∏–º: {validation.get('mode', 'unknown')}):")
            print(f"   –°—Ç–∞—Ç—É—Å: {validation.get('status', 'N/A')}")
            print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(validation.get('items', []))}")
            
            if 'items' in validation:
                print("\n   üì¶ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ –ø–æ–∑–∏—Ü–∏—è–º:")
                for item in validation['items']:
                    name = item.get('name', 'N/A')
                    quantity = item.get('quantity', 0)
                    unit_price = item.get('unit_price', 0)
                    total = item.get('total_cost', 0)
                    print(f"\n     - {name[:50]}")
                    print(f"       –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.")
                    print(f"       üí∞ –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {unit_price:,.2f} —Ä—É–±.")
                    print(f"       üí∞ –ò—Ç–æ–≥–æ: {total:,.2f} —Ä—É–±.")
            
            total_cost = validation.get('total_cost', 0)
            print(f"\n   üí∞ –ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost:,.2f} —Ä—É–±.")
        
        print("\n" + "-" * 70)


if __name__ == "__main__":
    test_prices_heuristic()
