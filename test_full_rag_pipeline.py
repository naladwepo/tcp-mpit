"""
–¢–µ—Å—Ç –ø–æ–ª–Ω–æ–≥–æ RAG pipeline —Å LLM –≤–∞–ª–∏–¥–∞—Ü–∏–µ–π
"""

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor


def test_full_pipeline():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–ª–Ω—ã–π pipeline:
    1. Query Enhancement
    2. Vector Search
    3. LLM Validation (—Å —Ä–∞—Å—á—ë—Ç–æ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç–∏)
    """
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ –ü–û–õ–ù–û–ì–û RAG PIPELINE")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_loader = DataLoader()
    products = data_loader.get_products()
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\nüîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å –≤–∞–ª–∏–¥–∞—Ç–æ—Ä–æ–º
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm=True,  # ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú LLM-—Ä–µ–∂–∏–º –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        use_query_enhancement=True,
        use_llm_validator=True,  # –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ç–æ—Ä
        use_iterative_search=False  # –ü–æ–∫–∞ –±–µ–∑ –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    )
    print("‚úì –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ (LLM-—Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω)")
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    test_queries = [
        {
            "id": 1,
            "query": "–ì–∞–π–∫–∞ –ú6",
            "complexity": "simple"
        },
        {
            "id": 2,
            "query": "–ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –∫–æ—Ä–æ–±–∞ 200x200: –∫–æ—Ä–æ–±, –∫—Ä—ã—à–∫–∞, –≤–∏–Ω—Ç—ã –∏ –≥–∞–π–∫–∏",
            "complexity": "complex"
        },
        {
            "id": 3,
            "query": "–õ–æ—Ç–æ–∫ –ø–µ—Ä—Ñ–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 600 –º–º —Å –∫—Ä–µ–ø–µ–∂–æ–º",
            "complexity": "medium"
        }
    ]
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–æ–≤
    for test_query in test_queries:
        print("\n" + "=" * 70)
        print(f"üìã –ó–ê–ü–†–û–° #{test_query['id']}")
        print("=" * 70)
        print(f"Query: {test_query['query']}")
        print(f"Complexity: {test_query['complexity']}")
        print("-" * 70)
        
        result = processor.process_query(
            query=test_query['query'],
            top_k=10,
            complexity=test_query['complexity'],
            query_id=test_query['id'],
            use_validation=True  # –í–∫–ª—é—á–∞–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
        )
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        print(f"  ‚Ä¢ –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result['retrieval_results']['total_found']}")
        print(f"  ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ –ø–æ—Å–ª–µ –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {len(result['final_selection'])}")
        print(f"  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']:,} —Ä—É–±.")
        print(f"  ‚Ä¢ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {result['confidence']:.0%}")
        
        if result.get('missing_items'):
            print(f"  ‚ö†Ô∏è –ù–µ —Ö–≤–∞—Ç–∞–µ—Ç: {len(result['missing_items'])} –ø–æ–∑–∏—Ü–∏–π")
        
        print("\n‚úÖ –í–´–ë–†–ê–ù–ù–´–ï –¢–û–í–ê–†–´:")
        for item in result['final_selection']:
            print(f"  ‚Ä¢ {item['name']} √ó {item['quantity']} = {item['total_price']:,} —Ä—É–±.")


def test_with_iterative_search():
    """
    –¢–µ—Å—Ç —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º (–µ—Å–ª–∏ —á–µ–≥–æ-—Ç–æ –Ω–µ —Ö–≤–∞—Ç–∞–µ—Ç)
    """
    print("\n\n" + "=" * 70)
    print("üîÑ –¢–ï–°–¢ –ò–¢–ï–†–ê–¢–ò–í–ù–û–ì–û –ü–û–ò–°–ö–ê")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_loader = DataLoader()
    products = data_loader.get_products()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º
    print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–º –ø–æ–∏—Å–∫–æ–º...")
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm=True,  # ‚úÖ –í–ö–õ–Æ–ß–ê–ï–ú LLM-—Ä–µ–∂–∏–º
        use_query_enhancement=True,
        use_llm_validator=True,
        use_iterative_search=True  # –í–∫–ª—é—á–∞–µ–º –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫!
    )
    
    # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–ø–æ–ª–Ω—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    query = "–ü–æ–ª–Ω—ã–π –∫–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞: –∫–æ—Ä–æ–± 200x200, –∫—Ä—ã—à–∫–∞, –≤–∏–Ω—Ç—ã –ú6, –≥–∞–π–∫–∏ –ú6, —à–∞–π–±—ã –ú6"
    
    print(f"\nüìã –ó–ê–ü–†–û–°: {query}")
    print("-" * 70)
    
    result = processor.process_query(
        query=query,
        top_k=5,  # –°–ø–µ—Ü–∏–∞–ª—å–Ω–æ –º–∞–ª–æ, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∏—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫
        complexity="complex",
        query_id=99,
        use_validation=True
    )
    
    print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´:")
    print(f"  ‚Ä¢ –ò—Ç–µ—Ä–∞—Ü–∏–π –ø–æ–∏—Å–∫–∞: {result['validation'].get('iterations', 1)}")
    print(f"  ‚Ä¢ –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result['validation'].get('total_items_found', 0)}")
    print(f"  ‚Ä¢ –í—ã–±—Ä–∞–Ω–æ: {len(result['final_selection'])}")
    print(f"  ‚Ä¢ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result['total_cost']:,} —Ä—É–±.")


if __name__ == "__main__":
    # –¢–µ—Å—Ç 1: –û—Å–Ω–æ–≤–Ω–æ–π pipeline
    test_full_pipeline()
    
    # –¢–µ—Å—Ç 2: –ò—Ç–µ—Ä–∞—Ç–∏–≤–Ω—ã–π –ø–æ–∏—Å–∫ (—Ä–∞—Å–∫–æ–º–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ –µ—Å–ª–∏ —Ö–æ—Ç–∏—Ç–µ –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å)
    # test_with_iterative_search()
    
    print("\n" + "=" * 70)
    print("‚úÖ –í–°–ï –¢–ï–°–¢–´ –ó–ê–í–ï–†–®–ï–ù–´")
    print("=" * 70)
