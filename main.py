#!/usr/bin/env python3
"""
–ì–ª–∞–≤–Ω—ã–π CLI –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è RAG-—Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
    python main.py "–í–∞—à –∑–∞–ø—Ä–æ—Å"
    python main.py --interactive
    python main.py --test test_queries.json
"""

import sys
import json
import argparse
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º src –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))


# –ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –¥–ª—è fallback
class SimpleSearchEngine:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤"""
    
    def __init__(self, products_df):
        self.products = products_df.to_dict('records')
    
    def search(self, query, top_k=10):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        query_words = set(query.lower().split())
        scored_products = []
        
        for product in self.products:
            name = product.get('name', '').lower()
            category = product.get('category', '').lower()
            text = f"{name} {category}"
            
            score = sum(1 for word in query_words if word in text)
            if score > 0:
                scored_products.append((product, score))
        
        scored_products.sort(key=lambda x: x[1], reverse=True)
        return scored_products[:top_k]


class SimpleProcessor:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –±–µ–∑ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞"""
    
    def __init__(self, data_dir="."):
        from src.data_loader import DataLoader
        from src.cost_calculator import create_response_json
        
        self.loader = DataLoader(data_dir)
        self.df = self.loader.combine_datasets()
        self.search_engine = SimpleSearchEngine(self.df)
        self.create_response_json = create_response_json
    
    def process_query(self, query, complexity=None, query_id=None):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        results = self.search_engine.search(query, top_k=10)
        found_items = [product for product, score in results]
        
        return self.create_response_json(
            found_items=found_items,
            query_id=query_id,
            complexity=complexity
        )


def print_result(response: dict, show_details: bool = True):
    """
    –ö—Ä–∞—Å–∏–≤–æ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞
    
    Args:
        response: —Å–ª–æ–≤–∞—Ä—å —Å –æ—Ç–≤–µ—Ç–æ–º
        show_details: –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å –¥–µ—Ç–∞–ª–∏ —Ç–æ–≤–∞—Ä–æ–≤
    """
    resp = response.get('response', {})
    
    print("\n" + "="*30)
    print("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê")
    print("="*30)
    
    # –ú–µ—Ç–∞–∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è
    if 'id' in response:
        print(f"ID –∑–∞–ø—Ä–æ—Å–∞: {response['id']}")
    if 'complexity' in response:
        print(f"–°–ª–æ–∂–Ω–æ—Å—Ç—å: {response['complexity']}")
    
    print(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {resp.get('items_count', 0)}")
    print(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {resp.get('total_cost', '0 —Ä—É–±.')}")
    
    # –°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
    if show_details:
        items = resp.get('found_items', [])
        if items:
            print("\n–°–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤:")
            print("-"*30)
            for i, item in enumerate(items, 1):
                print(f"\n{i}. {item.get('name', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}")
                print(f"   –°—Ç–æ–∏–º–æ—Å—Ç—å: {item.get('cost', '0 —Ä—É–±.')}")
    
    print("="*30 + "\n")


def interactive_mode(processor):
    """
    –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã
    
    Args:
        processor: —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (QueryProcessor –∏–ª–∏ SimpleProcessor)
    """
    print("\n" + "="*30)
    print("–ò–ù–¢–ï–†–ê–ö–¢–ò–í–ù–´–ô –†–ï–ñ–ò–ú")
    print("="*30)
    print("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–∏—Å–∫–∞ —Ç–æ–≤–∞—Ä–æ–≤ –∏–ª–∏ 'exit' –¥–ª—è –≤—ã—Ö–æ–¥–∞")
    print("–ü—Ä–∏–º–µ—Ä: –ì–∞–π–∫–∞ –ú6")
    print("="*30 + "\n")
    
    while True:
        try:
            query = input("–ó–∞–ø—Ä–æ—Å > ").strip()
            
            if not query:
                continue
            
            if query.lower() in ['exit', 'quit', 'q']:
                print("–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
                break
            
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
            response = processor.process_query(query)
            
            # –í—ã–≤–æ–¥ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            print_result(response)
            
        except KeyboardInterrupt:
            print("\n\n–î–æ —Å–≤–∏–¥–∞–Ω–∏—è!")
            break
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}\n")


def process_test_file(processor, test_file: str):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π —Ñ–∞–π–ª —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    Args:
        processor: —ç–∫–∑–µ–º–ø–ª—è—Ä –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (QueryProcessor –∏–ª–∏ SimpleProcessor)
        test_file: –ø—É—Ç—å –∫ JSON —Ñ–∞–π–ª—É —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏
    """
    print(f"\n–û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Ñ–∞–π–ª–∞: {test_file}")
    
    with open(test_file, 'r', encoding='utf-8') as f:
        test_data = json.load(f)
    
    query = test_data.get('query', '')
    query_id = test_data.get('id')
    complexity = test_data.get('complexity')
    
    print(f"\n–ó–∞–ø—Ä–æ—Å –∏–∑ —Ñ–∞–π–ª–∞: '{query}'")
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞
    response = processor.process_query(
        query=query,
        complexity=complexity,
        query_id=query_id
    )
    
    # –í—ã–≤–æ–¥
    print_result(response)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    output_file = f"result_{Path(test_file).stem}.json"
    with open(output_file, 'w', encoding='utf-8') as f:
        json.dump(response, f, ensure_ascii=False, indent=2)
    
    print(f"‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ {output_file}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    parser = argparse.ArgumentParser(
        description='RAG-—Å–∏—Å—Ç–µ–º–∞ –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –∏ —Ä–∞—Å—á–µ—Ç–∞ —Å—Ç–æ–∏–º–æ—Å—Ç–∏'
    )
    
    parser.add_argument(
        'query',
        nargs='?',
        help='–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å'
    )
    
    parser.add_argument(
        '-i', '--interactive',
        action='store_true',
        help='–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º'
    )
    
    parser.add_argument(
        '-t', '--test',
        type=str,
        help='–ü—É—Ç—å –∫ —Ç–µ—Å—Ç–æ–≤–æ–º—É JSON —Ñ–∞–π–ª—É'
    )
    
    parser.add_argument(
        '--no-llm',
        action='store_true',
        help='–û—Ç–∫–ª—é—á–∏—Ç—å LLM (—Ç–æ–ª—å–∫–æ –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫)'
    )
    
    parser.add_argument(
        '--model',
        type=str,
        default='./Qwen/Qwen3-4B-Instruct-2507',
        help='–ü—É—Ç—å –∫ –º–æ–¥–µ–ª–∏ Qwen'
    )
    
    parser.add_argument(
        '--embedding',
        type=str,
        default='sentence-transformers/all-MiniLM-L6-v2',
        help='–ú–æ–¥–µ–ª—å –¥–ª—è —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤ (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é: all-MiniLM-L6-v2)'
    )
    
    parser.add_argument(
        '--simple',
        action='store_true',
        help='–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –≤–º–µ—Å—Ç–æ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ'
    )
    
    parser.add_argument(
        '--index-dir',
        type=str,
        default='data/index',
        help='–î–∏—Ä–µ–∫—Ç–æ—Ä–∏—è –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω–¥–µ–∫—Å–∞'
    )
    
    parser.add_argument(
        '--rebuild-index',
        action='store_true',
        help='–ü–µ—Ä–µ—Å–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å –¥–∞–∂–µ –µ—Å–ª–∏ –æ–Ω —Å—É—â–µ—Å—Ç–≤—É–µ—Ç'
    )
    
    args = parser.parse_args()
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ä–µ–∂–∏–º –ø–æ–∏—Å–∫–∞
    print("="*30)
    print("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è RAG-—Å–∏—Å—Ç–µ–º—ã –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö")
    print("="*30)
    
    if args.simple:
        print("\nüìù –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫\n")
        try:
            processor = SimpleProcessor(data_dir=".")
            print(f"‚úì –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processor.df)} —Ç–æ–≤–∞—Ä–æ–≤\n")
        except Exception as e:
            print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: {e}")
            import traceback
            traceback.print_exc()
            return 1
    else:
        print("\nüîç –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫\n")
        try:
            from src.data_loader import DataLoader
            from src.search_engine import VectorSearchEngine
            from src.hybrid_processor import HybridQueryProcessor
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
            data_loader = DataLoader()
            products_df = data_loader.get_products()
            print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products_df)}")
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
            search_engine = VectorSearchEngine(
                model_name=args.embedding,
                index_dir=args.index_dir
            )
            
            # –°—Ç—Ä–æ–∏–º –∏–Ω–¥–µ–∫—Å –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
            if args.rebuild_index or not search_engine.load_index():
                print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞...")
                search_engine.build_index(products_df, force_rebuild=args.rebuild_index)
                print("‚úì –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
            else:
                print("‚úì –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω")
            
            # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å LLM
            use_llm = not args.no_llm
            if use_llm:
                print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è LLM –¥–ª—è –ø—Ä–µ–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥–∞...")
            
            processor = HybridQueryProcessor(
                search_engine=search_engine,
                use_llm=use_llm
            )
            print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ\n")
        except Exception as e:
            print(f"‚ö†Ô∏è  –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞: {e}")
            print("üìù –ü–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏–µ –Ω–∞ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫...\n")
            try:
                processor = SimpleProcessor(data_dir=".")
                print(f"‚úì –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞! –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(processor.df)} —Ç–æ–≤–∞—Ä–æ–≤\n")
            except Exception as e2:
                print(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Å–∏—Å—Ç–µ–º—É: {e2}")
                import traceback
                traceback.print_exc()
                return 1
    
    # –í—ã–±–æ—Ä —Ä–µ–∂–∏–º–∞ —Ä–∞–±–æ—Ç—ã
    try:
        if args.interactive:
            # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω—ã–π —Ä–µ–∂–∏–º
            interactive_mode(processor)
        
        elif args.test:
            # –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∏–∑ —Ñ–∞–π–ª–∞
            process_test_file(processor, args.test)
        
        elif args.query:
            # –û–¥–∏–Ω–æ—á–Ω—ã–π –∑–∞–ø—Ä–æ—Å
            response = processor.process_query(args.query)
            print_result(response)
            
            # –í—ã–≤–æ–¥ JSON
            print("\nJSON –æ—Ç–≤–µ—Ç:")
            print(json.dumps(response, ensure_ascii=False, indent=2))
        
        else:
            # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º help
            parser.print_help()
            return 1
    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {e}")
        import traceback
        traceback.print_exc()
        return 1
    
    return 0


if __name__ == "__main__":
    sys.exit(main())
