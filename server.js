const express = require('express')
const cors = require('cors')
const path = require('path')
const fs = require('fs').promises
const multer = require('multer')
const pdfParse = require('pdf-parse')
const mammoth = require('mammoth')

const app = express()
const PORT = process.env.PORT || 5000

// Middleware
app.use(cors())
app.use(express.json())

// –ù–∞—Å—Ç—Ä–æ–π–∫–∞ multer –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤
const storage = multer.diskStorage({
  destination: (req, file, cb) => {
    const uploadDir = path.join(__dirname, 'model_files')
    cb(null, uploadDir)
  },
  filename: (req, file, cb) => {
    cb(null, file.originalname)
  }
})

const upload = multer({ storage })

// –§—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Ñ–∞–π–ª–æ–≤
async function parsePDF(filePath) {
  try {
    const dataBuffer = await fs.readFile(filePath)
    const data = await pdfParse(dataBuffer)
    return data.text
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ PDF: ${error.message}`)
  }
}

async function parseWord(filePath) {
  try {
    const result = await mammoth.extractRawText({ path: filePath })
    return result.value
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Word: ${error.message}`)
  }
}

async function parseCSV(filePath) {
  try {
    const content = await fs.readFile(filePath, 'utf-8')
    const lines = content.split('\n').filter(line => line.trim())
    
    if (lines.length < 2) {
      throw new Error('CSV —Ñ–∞–π–ª –¥–æ–ª–∂–µ–Ω —Å–æ–¥–µ—Ä–∂–∞—Ç—å –∑–∞–≥–æ–ª–æ–≤–∫–∏ –∏ —Ö–æ—Ç—è –±—ã –æ–¥–Ω—É —Å—Ç—Ä–æ–∫—É –¥–∞–Ω–Ω—ã—Ö')
    }
    
    const headers = lines[0].split(',').map(h => h.trim().toLowerCase())
    const requiredFields = ['–Ω–∞–∑–≤–∞–Ω–∏–µ', '—Ü–µ–Ω–∞', '–æ–ø–∏—Å–∞–Ω–∏–µ']
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–æ–ª–µ–π
    const missingFields = requiredFields.filter(field => 
      !headers.some(header => header.includes(field))
    )
    
    if (missingFields.length > 0) {
      throw new Error(`–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è: ${missingFields.join(', ')}`)
    }
    
    return content
  } catch (error) {
    throw new Error(`–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ CSV: ${error.message}`)
  }
}

async function extractDataFromText(text, fileType) {
  // –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ —Ç–µ–∫—Å—Ç–∞
  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–æ–µ–∫—Ç–µ –∑–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –±–æ–ª–µ–µ —Å–ª–æ–∂–Ω–∞—è –ª–æ–≥–∏–∫–∞
  const lines = text.split('\n').filter(line => line.trim())
  const products = []
  
  for (const line of lines) {
    // –ò—â–µ–º –ø–∞—Ç—Ç–µ—Ä–Ω—ã —Å —Ü–µ–Ω–∞–º–∏
    const priceMatch = line.match(/(\d+[\s,]*\d*)\s*—Ä—É–±/i)
    if (priceMatch) {
      const price = priceMatch[1].replace(/\s/g, '').replace(',', '')
      const name = line.replace(priceMatch[0], '').trim()
      
      if (name && price) {
        products.push({
          name: name,
          price: `${price} —Ä—É–±.`,
          description: line
        })
      }
    }
  }
  
  return products
}

// Serve static files from the React app build directory
app.use(express.static(path.join(__dirname, 'dist')))

// API Routes
app.post('/api/chat', async (req, res) => {
  try {
    const { message } = req.body
    
    if (!message) {
      return res.status(400).json({ error: '–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º' })
    }

    // –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ö–ü
    let responseData
    try {
      responseData = await callFastAPI(message)
    } catch (error) {
      console.error('FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –∑–∞–≥–ª—É—à–∫—É:', error)
      responseData = {
        text: await simulateRAGResponse(message),
        files: null
      }
    }
    
    res.json({ 
      response: responseData.text,
      files: responseData.files
    })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è:', error)
    res.status(500).json({ error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞' })
  }
})

// –ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å FastAPI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ö–ü
async function callFastAPI(message) {
  try {
    const response = await fetch('http://localhost:8000/generate/both', {
      method: 'POST',
      headers: {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        query: message,
        top_k: 10,
        use_decomposition: true
      })
    })

    if (!response.ok) {
      throw new Error(`FastAPI error: ${response.status}`)
    }

    const data = await response.json()
    
    // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –≤ —á–∞—Ç–µ
    let responseText = data.search_result || '–¢–ö–ü —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!'
    
    // –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö —Ñ–∞–π–ª–∞—Ö
    if (data.files) {
      responseText += '\n\nüìÑ –°–æ–∑–¥–∞–Ω–Ω—ã–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã:\n'
      if (data.files.word) {
        responseText += `‚Ä¢ Word: ${data.files.word.filename}\n`
      }
      if (data.files.pdf) {
        responseText += `‚Ä¢ PDF: ${data.files.pdf.filename}\n`
      }
    }
    
    return {
      text: responseText,
      files: data.files || null
    }
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ FastAPI:', error)
    return {
      text: '–ò–∑–≤–∏–Ω–∏—Ç–µ, –≤ –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç —Å–µ—Ä–≤–∏—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ö–ü –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.',
      files: null
    }
  }
}

// –§—É–Ω–∫—Ü–∏—è-–∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ RAG-–æ—Ç–≤–µ—Ç–∞ (–µ—Å–ª–∏ FastAPI –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω)
async function simulateRAGResponse(message) {
  // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É –æ–±—Ä–∞–±–æ—Ç–∫–∏
  await new Promise(resolve => setTimeout(resolve, 1000 + Math.random() * 2000))
  
  // –ü—Ä–æ—Å—Ç—ã–µ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤
  const responses = {
    '–ø—Ä–∏–≤–µ—Ç': '–ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É –≤–∞–º –Ω–∞–π—Ç–∏ –Ω—É–∂–Ω—ã–µ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–µ. –ß—Ç–æ –≤—ã –∏—â–µ—Ç–µ?',
    '–∫–∞–∫ –¥–µ–ª–∞': '–£ –º–µ–Ω—è –≤—Å—ë –æ—Ç–ª–∏—á–Ω–æ! –ì–æ—Ç–æ–≤ –ø–æ–º–æ—á—å –≤–∞–º —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.',
    '—Å–ø–∞—Å–∏–±–æ': '–ü–æ–∂–∞–ª—É–π—Å—Ç–∞! –†–∞–¥ –±—ã–ª –ø–æ–º–æ—á—å. –ï—Å—Ç—å –µ—â—ë –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏–º?',
    '–ø–æ–∫–∞': '–î–æ —Å–≤–∏–¥–∞–Ω–∏—è! –í–æ–∑–≤—Ä–∞—â–∞–π—Ç–µ—Å—å, –µ—Å–ª–∏ –ø–æ–Ω–∞–¥–æ–±–∏—Ç—Å—è –ø–æ–º–æ—â—å —Å –ø–æ–∏—Å–∫–æ–º –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö.',
    '–ø–æ–º–æ—â—å': '–Ø –≥–æ—Ç–æ–≤ –ø–æ–º–æ—á—å! –ó–∞–¥–∞–≤–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö, –∏ —è –Ω–∞–π–¥—É –¥–ª—è –≤–∞—Å –Ω—É–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é.',
    '–≥–∞–π–∫–∞': '–î–ª—è –ø–æ–∏—Å–∫–∞ –≥–∞–µ–∫ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–≥–∞–π–∫–∞ –ú6")',
    '–±–æ–ª—Ç': '–î–ª—è –ø–æ–∏—Å–∫–∞ –±–æ–ª—Ç–æ–≤ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–±–æ–ª—Ç –ú8—Ö20")',
    '–ª–æ—Ç–æ–∫': '–î–ª—è –ø–æ–∏—Å–∫–∞ –ª–æ—Ç–∫–æ–≤ —É–∫–∞–∂–∏—Ç–µ —Ä–∞–∑–º–µ—Ä—ã –∏ —Ç–∏–ø (–Ω–∞–ø—Ä–∏–º–µ—Ä: "–ª–æ—Ç–æ–∫ –ø–µ—Ä—Ñ–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π 100x100")',
    'default': `–î–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –æ–ø–∏—à–∏—Ç–µ —á—Ç–æ –≤–∞–º –Ω—É–∂–Ω–æ –±–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ. –ù–∞–ø—Ä–∏–º–µ—Ä: "–≥–∞–π–∫–∞ –ú6", "–ª–æ—Ç–æ–∫ 100x100 –º–º", "—Ö–æ–º—É—Ç –¥–ª—è —Ç—Ä—É–±—ã 50 –º–º".`
  }
  
  const lowerMessage = message.toLowerCase()
  for (const [keyword, response] of Object.entries(responses)) {
    if (lowerMessage.includes(keyword)) {
      return response
    }
  }
  
  return responses.default
}

// Admin API endpoints
app.get('/api/admin/files', async (req, res) => {
  try {
    const files = await fs.readdir(modelFilesDir)
    const fileList = await Promise.all(
      files.map(async (filename) => {
        const filePath = path.join(modelFilesDir, filename)
        const stats = await fs.stat(filePath)
        return {
          name: filename,
          size: stats.size,
          modified: stats.mtime
        }
      })
    )
    res.json({ files: fileList })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤' })
  }
})

app.post('/api/admin/upload', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }
    res.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω', filename: req.file.filename })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–∞' })
  }
})

app.get('/api/admin/files/:filename', async (req, res) => {
  try {
    const filename = decodeURIComponent(req.params.filename)
    const filePath = path.join(modelFilesDir, filename)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (!filePath.startsWith(modelFilesDir)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' })
    }
    
    const content = await fs.readFile(filePath, 'utf8')
    res.json({ content })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è —Ñ–∞–π–ª–∞' })
  }
})

app.put('/api/admin/files/:filename', async (req, res) => {
  try {
    const filename = decodeURIComponent(req.params.filename)
    const filePath = path.join(modelFilesDir, filename)
    const { content } = req.body
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (!filePath.startsWith(modelFilesDir)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' })
    }
    
    await fs.writeFile(filePath, content, 'utf8')
    res.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Ñ–∞–π–ª–∞' })
  }
})

app.delete('/api/admin/files/:filename', async (req, res) => {
  try {
    const filename = decodeURIComponent(req.params.filename)
    const filePath = path.join(modelFilesDir, filename)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (!filePath.startsWith(modelFilesDir)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' })
    }
    
    await fs.unlink(filePath)
    res.json({ message: '–§–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è —Ñ–∞–π–ª–∞' })
  }
})

app.post('/api/admin/rebuild', async (req, res) => {
  try {
    // –ó–¥–µ—Å—å –±—É–¥–µ—Ç –ª–æ–≥–∏–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏
    // –ü–æ–∫–∞ —á—Ç–æ –ø—Ä–æ—Å—Ç–æ –∏–º–∏—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Ü–µ—Å—Å
    console.log('–ü–µ—Ä–µ—Å–±–æ—Ä–∫–∞ –º–æ–¥–µ–ª–∏...')
    
    // –ò–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    await new Promise(resolve => setTimeout(resolve, 2000))
    
    res.json({ message: '–ú–æ–¥–µ–ª—å —É—Å–ø–µ—à–Ω–æ –ø–µ—Ä–µ—Å–æ–±—Ä–∞–Ω–∞' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–µ—Ä–µ—Å–±–æ—Ä–∫–∏ –º–æ–¥–µ–ª–∏' })
  }
})

// CSV —Ñ–∞–π–ª—ã endpoints
app.get('/api/admin/csv-files', async (req, res) => {
  try {
    const files = await fs.readdir(dataFilesDir)
    const csvFiles = files.filter(file => file.endsWith('.csv'))
    const fileList = await Promise.all(
      csvFiles.map(async (filename) => {
        const filePath = path.join(dataFilesDir, filename)
        const stats = await fs.stat(filePath)
        return {
          name: filename,
          size: stats.size,
          modified: stats.mtime
        }
      })
    )
    res.json({ files: fileList })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ CSV —Ñ–∞–π–ª–æ–≤' })
  }
})

// –ù–æ–≤—ã–π endpoint –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ —Ñ–∞–π–ª–æ–≤ —Å –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π —Ä–∞–∑–Ω—ã—Ö —Ä–µ–∂–∏–º–æ–≤
app.post('/api/admin/upload-file', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: '–§–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }
    
    const file = req.file
    const mode = req.body.mode || 'append' // 'append' –∏–ª–∏ 'replace'
    const fileExtension = path.extname(file.originalname).toLowerCase()
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ —Ñ–æ—Ä–º–∞—Ç—ã
    const supportedFormats = ['.csv', '.pdf', '.docx']
    if (!supportedFormats.includes(fileExtension)) {
      await fs.unlink(file.path) // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
      return res.status(400).json({ 
        error: `–ù–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ñ–æ—Ä–º–∞—Ç —Ñ–∞–π–ª–∞. –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è: ${supportedFormats.join(', ')}` 
      })
    }
    
    let processedData = null
    let csvContent = null
    
    try {
      // –ü–∞—Ä—Å–∏–º —Ñ–∞–π–ª –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ñ–æ—Ä–º–∞—Ç–∞
      if (fileExtension === '.csv') {
        csvContent = await parseCSV(file.path)
      } else if (fileExtension === '.pdf') {
        const text = await parsePDF(file.path)
        const products = await extractDataFromText(text, 'pdf')
        csvContent = convertToCSV(products)
      } else if (fileExtension === '.docx') {
        const text = await parseWord(file.path)
        const products = await extractDataFromText(text, 'word')
        csvContent = convertToCSV(products)
      }
      
      // –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –≤–æ –≤—Ä–µ–º–µ–Ω–Ω—ã–π CSV —Ñ–∞–π–ª
      const tempCsvPath = path.join(uploadsDir, `processed_${Date.now()}.csv`)
      await fs.writeFile(tempCsvPath, csvContent, 'utf-8')
      
      // –£–≤–µ–¥–æ–º–ª—è–µ–º FastAPI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
      const response = await fetch('http://localhost:8000/rebuild-db', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          csv_file: `processed_${Date.now()}.csv`,
          file_path: tempCsvPath,
          mode: mode
        })
      })
      
      if (response.ok) {
        const result = await response.json()
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞:', result)
        
        // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã
        await fs.unlink(file.path)
        await fs.unlink(tempCsvPath)
        
        res.json({ 
          message: `–§–∞–π–ª ${file.originalname} —É—Å–ø–µ—à–Ω–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞ (—Ä–µ–∂–∏–º: ${mode})`,
          filename: file.originalname,
          mode: mode,
          products_count: result.products_count || 0
        })
      } else {
        throw new Error('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ FastAPI')
      }
      
    } catch (parseError) {
      // –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏ –æ—à–∏–±–∫–µ
      await fs.unlink(file.path)
      throw parseError
    }
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: error.message || '–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–∞' })
  }
})

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –≤ CSV —Ñ–æ—Ä–º–∞—Ç
function convertToCSV(products) {
  if (!products || products.length === 0) {
    return '–Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞,–æ–ø–∏—Å–∞–Ω–∏–µ\n'
  }
  
  const headers = '–Ω–∞–∑–≤–∞–Ω–∏–µ,—Ü–µ–Ω–∞,–æ–ø–∏—Å–∞–Ω–∏–µ\n'
  const rows = products.map(product => 
    `"${product.name}","${product.price}","${product.description}"`
  ).join('\n')
  
  return headers + rows
}

// –°—Ç–∞—Ä—ã–π endpoint –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
app.post('/api/admin/upload-csv', upload.single('file'), async (req, res) => {
  try {
    if (!req.file) {
      return res.status(400).json({ error: 'CSV —Ñ–∞–π–ª –Ω–µ –±—ã–ª –∑–∞–≥—Ä—É–∂–µ–Ω' })
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç—Ç–æ CSV —Ñ–∞–π–ª
    if (!req.file.originalname.endsWith('.csv')) {
      return res.status(400).json({ error: '–§–∞–π–ª –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –≤ —Ñ–æ—Ä–º–∞—Ç–µ CSV' })
    }
    
    // –ü–µ—Ä–µ–º–µ—â–∞–µ–º —Ñ–∞–π–ª –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –¥–∞–Ω–Ω—ã—Ö
    const newPath = path.join(dataFilesDir, req.file.originalname)
    await fs.rename(req.file.path, newPath)
    
    // –£–≤–µ–¥–æ–º–ª—è–µ–º FastAPI –æ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î
    try {
      const response = await fetch('http://localhost:8000/rebuild-db', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        body: JSON.stringify({
          csv_file: req.file.originalname,
          file_path: newPath
        })
      })
      
      if (response.ok) {
        console.log('–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞')
      } else {
        console.log('–û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≤ FastAPI')
      }
    } catch (apiError) {
      console.error('–û—à–∏–±–∫–∞ –≤—ã–∑–æ–≤–∞ FastAPI –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ë–î:', apiError)
    }
    
    res.json({ message: 'CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω –∏ –±–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∞', filename: req.file.originalname })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ CSV —Ñ–∞–π–ª–∞' })
  }
})

app.get('/api/admin/csv-files/:filename', async (req, res) => {
  try {
    const filename = decodeURIComponent(req.params.filename)
    const filePath = path.join(dataFilesDir, filename)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (!filePath.startsWith(dataFilesDir)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' })
    }
    
    const content = await fs.readFile(filePath, 'utf8')
    res.json({ content })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞' })
  }
})

app.delete('/api/admin/csv-files/:filename', async (req, res) => {
  try {
    const filename = decodeURIComponent(req.params.filename)
    const filePath = path.join(dataFilesDir, filename)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –ø—É—Ç–∏
    if (!filePath.startsWith(dataFilesDir)) {
      return res.status(400).json({ error: '–ù–µ–¥–æ–ø—É—Å—Ç–∏–º–æ–µ –∏–º—è —Ñ–∞–π–ª–∞' })
    }
    
    await fs.unlink(filePath)
    res.json({ message: 'CSV —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω' })
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è CSV —Ñ–∞–π–ª–∞' })
  }
})

// Health check endpoint
app.get('/api/health', (req, res) => {
  res.json({ status: 'OK', message: 'RAG Chatbot API —Ä–∞–±–æ—Ç–∞–µ—Ç' })
})

// Catch all handler: send back React's index.html file for any non-API routes
// Endpoint –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–æ–≤
app.get('/api/download/:filename', async (req, res) => {
  try {
    const filename = req.params.filename
    const filePath = path.join(__dirname, 'generated_documents', filename)
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞
    try {
      await fs.access(filePath)
    } catch (error) {
      return res.status(404).json({ error: '–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω' })
    }
    
    // –û–ø—Ä–µ–¥–µ–ª—è–µ–º MIME type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    const ext = path.extname(filename).toLowerCase()
    let mimeType = 'application/octet-stream'
    
    if (ext === '.pdf') {
      mimeType = 'application/pdf'
    } else if (ext === '.docx') {
      mimeType = 'application/vnd.openxmlformats-officedocument.wordprocessingml.document'
    }
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ñ–∞–π–ª
    res.setHeader('Content-Type', mimeType)
    res.setHeader('Content-Disposition', `attachment; filename="${filename}"`)
    res.sendFile(filePath)
    
  } catch (error) {
    console.error('–û—à–∏–±–∫–∞ —Å–∫–∞—á–∏–≤–∞–Ω–∏—è —Ñ–∞–π–ª–∞:', error)
    res.status(500).json({ error: '–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–∫–∞—á–∏–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞' })
  }
})

app.get('*', (req, res) => {
  res.sendFile(path.join(__dirname, 'dist', 'index.html'))
})

app.listen(PORT, () => {
  console.log(`üöÄ –°–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É ${PORT}`)
  console.log(`üì± –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–æ—Å—Ç—É–ø–µ–Ω –ø–æ –∞–¥—Ä–µ—Å—É: http://localhost:${PORT}`)
  console.log(`üîó API endpoint: http://localhost:${PORT}/api/chat`)
})
