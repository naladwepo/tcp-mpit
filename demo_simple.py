#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –±–æ–ª—å—à–∏—Ö –º–æ–¥–µ–ª–µ–π
–ò—Å–ø–æ–ª—å–∑—É–µ—Ç –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
"""

import sys
from pathlib import Path
import json

sys.path.insert(0, str(Path(__file__).parent / "src"))

from src.data_loader import DataLoader
from src.cost_calculator import create_response_json


class SimpleSearchEngine:
    """–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤"""
    
    def __init__(self, products_df):
        self.products = products_df.to_dict('records')
    
    def search(self, query, top_k=5):
        """–ü—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫"""
        query_words = set(query.lower().split())
        
        # –û—Ü–µ–Ω–∏–≤–∞–µ–º —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
        scored_products = []
        for product in self.products:
            name = product.get('name', '').lower()
            category = product.get('category', '').lower()
            text = f"{name} {category}"
            
            # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è —Å–ª–æ–≤
            score = sum(1 for word in query_words if word in text)
            
            if score > 0:
                scored_products.append((product, score))
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–æ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç–∏
        scored_products.sort(key=lambda x: x[1], reverse=True)
        
        return scored_products[:top_k]


def demo():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Ä–∞–±–æ—Ç—ã —Å–∏—Å—Ç–µ–º—ã"""
    
    print("\n" + "="*70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ü–û–ò–°–ö–ê –ö–û–ú–ü–õ–ï–ö–¢–£–Æ–©–ò–• (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)")
    print("="*70)
    print("\n–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏\n")
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("[1/2] –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    try:
        loader = DataLoader()
        df = loader.combine_datasets()
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(df)} —Ç–æ–≤–∞—Ä–æ–≤")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")
        return
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–∏—Å–∫–æ–≤–æ–≥–æ –¥–≤–∏–∂–∫–∞
    print("\n[2/2] –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–æ–∏—Å–∫–∞...")
    search_engine = SimpleSearchEngine(df)
    print("‚úì –ü–æ–∏—Å–∫–æ–≤—ã–π –¥–≤–∏–∂–æ–∫ –≥–æ—Ç–æ–≤")
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
    demo_queries = [
        ("–ì–∞–π–∫–∞ –ú6", "–ü—Ä–æ—Å—Ç–æ–π –ø–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é"),
        ("–ö–æ—Ä–æ–± 200x200", "–ü–æ–∏—Å–∫ —Å —Ä–∞–∑–º–µ—Ä–∞–º–∏"),
        ("–õ–æ—Ç–æ–∫ –ø–µ—Ä—Ñ–æ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π", "–ü–æ–∏—Å–∫ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏"),
        ("–ö—Ä—ã—à–∫–∞ 200 –º–º", "–ü–æ–∏—Å–∫ —Å —Ä–∞–∑–º–µ—Ä–æ–º"),
    ]
    
    print("\n" + "="*70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–û–ù–ù–´–ï –ó–ê–ü–†–û–°–´")
    print("="*70)
    
    for query, description in demo_queries:
        print(f"\n{'='*70}")
        print(f"üìù –ó–∞–ø—Ä–æ—Å: {query}")
        print(f"   ({description})")
        print('='*70)
        
        try:
            # –ü–æ–∏—Å–∫
            results = search_engine.search(query, top_k=5)
            
            if not results:
                print("\n‚ö† –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                continue
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤
            found_items = [product for product, score in results]
            
            # –°–æ–∑–¥–∞–µ–º –æ—Ç–≤–µ—Ç
            response = create_response_json(found_items)
            resp = response.get('response', {})
            items = resp.get('found_items', [])
            
            print(f"\n‚úì –ù–∞–π–¥–µ–Ω–æ: {resp.get('items_count', 0)} —Ç–æ–≤–∞—Ä–æ–≤")
            print(f"üí∞ –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {resp.get('total_cost', '0 —Ä—É–±.')}")
            
            if items:
                print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç—ã:")
                for i, item in enumerate(items[:3], 1):
                    name = item.get('name', '')
                    if len(name) > 60:
                        name = name[:57] + "..."
                    print(f"  {i}. {name}")
                    print(f"     {item.get('cost', '0 —Ä—É–±.')}")
            
        except Exception as e:
            print(f"\n‚ùå –û—à–∏–±–∫–∞: {e}")
    
    print("\n" + "="*70)
    print("–î–ï–ú–û–ù–°–¢–†–ê–¶–ò–Ø –ó–ê–í–ï–†–®–ï–ù–ê")
    print("="*70)
    print("\n–≠—Ç–æ —É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è —Å —Ç–µ–∫—Å—Ç–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.")
    print("–î–ª—è –ø–æ–ª–Ω–æ–π –≤–µ—Ä—Å–∏–∏ —Å –≤–µ–∫—Ç–æ—Ä–Ω—ã–º –ø–æ–∏—Å–∫–æ–º —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ:")
    print("  pip install sentence-transformers faiss-cpu")
    print("\n–ó–∞—Ç–µ–º –∑–∞–ø—É—Å—Ç–∏—Ç–µ: python main.py --no-llm --interactive")
    print("\n" + "="*70 + "\n")


if __name__ == "__main__":
    demo()
