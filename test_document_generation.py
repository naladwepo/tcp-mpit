#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¢–ö–ü –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤ —á–µ—Ä–µ–∑ API
"""

import requests
import json
from pathlib import Path

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"

# –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã
TEST_QUERIES = [
    "–ö–æ–º–ø–ª–µ–∫—Ç –¥–ª—è –º–æ–Ω—Ç–∞–∂–∞ –∫–æ—Ä–æ–±–∞ 200x200: –∫–æ—Ä–æ–±, –∫—Ä—ã—à–∫–∞, –≤–∏–Ω—Ç—ã –∏ –≥–∞–π–∫–∏",
    "–ö—Ä—ã—à–∫–∞ 200 –º–º",
    "–ì–∞–π–∫–∞ –ú6"
]


def check_api():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API"""
    try:
        response = requests.get(f"{API_BASE_URL}/health", timeout=5)
        if response.status_code == 200:
            print("‚úì API –¥–æ—Å—Ç—É–ø–µ–Ω")
            return True
        return False
    except:
        print("‚úó API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
        return False


def generate_word(query: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è Word –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è Word –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    print(f"   –ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/generate/word",
            json={"query": query, "use_llm": True},
            timeout=120
        )
        
        if response.status_code == 200:
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = f"test_tkp_{query[:20].replace(' ', '_')}.docx"
            filepath = Path(filename)
            
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            print(f"   ‚úì Word –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            return filepath
        else:
            print(f"   ‚úó –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
        return None


def generate_pdf(query: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞"""
    print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è PDF –¥–æ–∫—É–º–µ–Ω—Ç–∞...")
    print(f"   –ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/generate/pdf",
            json={"query": query, "use_llm": True},
            timeout=120
        )
        
        if response.status_code == 200:
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞—Å—à–∏—Ä–µ–Ω–∏–µ —Ñ–∞–π–ª–∞ –∏–∑ Content-Type
            content_type = response.headers.get('content-type', '')
            if 'pdf' in content_type:
                ext = 'pdf'
            else:
                ext = 'docx'
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ñ–∞–π–ª
            filename = f"test_tkp_{query[:20].replace(' ', '_')}.{ext}"
            filepath = Path(filename)
            
            with open(filepath, 'wb') as f:
                f.write(response.content)
            
            if ext == 'pdf':
                print(f"   ‚úì PDF –¥–æ–∫—É–º–µ–Ω—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filepath}")
            else:
                print(f"   ‚ö† PDF –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, —Å–æ—Ö—Ä–∞–Ω–µ–Ω Word: {filepath}")
            return filepath
        else:
            print(f"   ‚úó –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
        return None


def generate_both(query: str):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤"""
    print(f"\nüìÑ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–æ–≤...")
    print(f"   –ó–∞–ø—Ä–æ—Å: {query}")
    
    try:
        response = requests.post(
            f"{API_BASE_URL}/generate/both",
            json={"query": query, "use_llm": True},
            timeout=120
        )
        
        if response.status_code == 200:
            result = response.json()
            print(f"   ‚úì –î–æ–∫—É–º–µ–Ω—Ç—ã —Å–æ–∑–¥–∞–Ω—ã:")
            print(f"     Word: {result['files']['word']['filename']}")
            print(f"     PDF: {result['files']['pdf']['filename']}")
            print(f"     –°–∫–∞—á–∞—Ç—å: {API_BASE_URL}{result['files']['word']['download_url']}")
            print(f"     –°–∫–∞—á–∞—Ç—å: {API_BASE_URL}{result['files']['pdf']['download_url']}")
            return result
        else:
            print(f"   ‚úó –û—à–∏–±–∫–∞: {response.status_code}")
            print(f"   {response.text}")
            return None
            
    except Exception as e:
        print(f"   ‚úó –û—à–∏–±–∫–∞: {e}")
        return None


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("=" * 70)
    print("  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï –ì–ï–ù–ï–†–ê–¶–ò–ò –¢–ö–ü –î–û–ö–£–ú–ï–ù–¢–û–í")
    print("=" * 70)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º API
    if not check_api():
        print("\n–ó–∞–ø—É—Å—Ç–∏—Ç–µ API: uvicorn src.api.main:app --reload")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º –∑–∞–ø—Ä–æ—Å
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å:")
    for i, query in enumerate(TEST_QUERIES, 1):
        print(f"  {i}. {query}")
    print(f"  {len(TEST_QUERIES) + 1}. –°–≤–æ–π –∑–∞–ø—Ä–æ—Å")
    
    try:
        choice = int(input("\n–í—ã–±–æ—Ä: "))
        
        if 1 <= choice <= len(TEST_QUERIES):
            query = TEST_QUERIES[choice - 1]
        elif choice == len(TEST_QUERIES) + 1:
            query = input("–í–≤–µ–¥–∏—Ç–µ –∑–∞–ø—Ä–æ—Å: ")
        else:
            print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
            return
    except:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return
    
    # –í—ã–±–∏—Ä–∞–µ–º —Ñ–æ—Ä–º–∞—Ç
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ —Ñ–æ—Ä–º–∞—Ç:")
    print("  1. Word (.docx)")
    print("  2. PDF")
    print("  3. –û–±–∞ —Ñ–æ—Ä–º–∞—Ç–∞")
    
    try:
        format_choice = int(input("–í—ã–±–æ—Ä: "))
    except:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤–≤–æ–¥")
        return
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º
    if format_choice == 1:
        generate_word(query)
    elif format_choice == 2:
        generate_pdf(query)
    elif format_choice == 3:
        generate_both(query)
    else:
        print("–ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä")
        return
    
    print("\n‚úÖ –ì–æ—Ç–æ–≤–æ!")


if __name__ == "__main__":
    main()
