"""
–ì–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏–µ–π –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
"""

from typing import List, Dict, Tuple, Optional
from src.llm_preprocessor import LLMQueryPreprocessor
from src.llm_request_parser import LLMRequestParser
from src.query_enhancement import QueryEnhancer
from src.llm_validator import LLMValidator, IterativeSearchValidator
from src.search_engine import VectorSearchEngine
from src.cost_calculator import create_response_json


class HybridQueryProcessor:
    """
    –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ —Å LLM –ø–∞—Ä—Å–µ—Ä–æ–º –Ω–∞ –≤—Ö–æ–¥–µ
    
    –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞:
    1. LLM –ø–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ
    2. –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞
    3. –§–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞ —Å —Ü–µ–Ω–∞–º–∏
    """
    
    def __init__(
        self, 
        search_engine: VectorSearchEngine,
        use_llm_parser: bool = True,
        llm_model_path: str = "./Qwen/Qwen3-4B-Instruct-2507",
        use_fallback_enhancement: bool = True
    ):
        """
        Args:
            search_engine: —ç–∫–∑–µ–º–ø–ª—è—Ä –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
            use_llm_parser: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ LLM –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ –≤—Ö–æ–¥–µ
            llm_model_path: –ø—É—Ç—å –∫ LLM –º–æ–¥–µ–ª–∏
            use_fallback_enhancement: –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ QueryEnhancer –∫–∞–∫ fallback
        """
        self.search_engine = search_engine
        self.use_llm_parser = use_llm_parser
        
        # LLM –ø–∞—Ä—Å–µ—Ä –∑–∞–ø—Ä–æ—Å–æ–≤ (–≥–ª–∞–≤–Ω—ã–π –∫–æ–º–ø–æ–Ω–µ–Ω—Ç –Ω–∞ –≤—Ö–æ–¥–µ)
        if use_llm_parser:
            self.request_parser = LLMRequestParser(
                model_path=llm_model_path,
                device=None  # –ê–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ: CUDA > MPS > CPU
            )
            print("‚úì LLM Request Parser –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.request_parser = None
        
        # Query enhancer –∫–∞–∫ fallback
        if use_fallback_enhancement:
            self.query_enhancer = QueryEnhancer()
            print("‚úì Query Enhancer (fallback) –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
        else:
            self.query_enhancer = None
    
    def process_query(
        self, 
        query: str, 
        query_id: int = None
    ) -> Dict:
        """
        –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        
        Pipeline:
        1. LLM –ø–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + top_k
        2. –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º top_k)
        3. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
        
        Args:
            query: –ø–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
            query_id: ID –∑–∞–ø—Ä–æ—Å–∞
            
        Returns:
            Dict: JSON –æ—Ç–≤–µ—Ç —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Ü–µ–Ω–∞–º–∏
        """
        print(f"\n{'='*70}")
        print(f"üìã –û–ë–†–ê–ë–û–¢–ö–ê –ó–ê–ü–†–û–°–ê")
        print(f"{'='*70}")
        print(f"–ó–∞–ø—Ä–æ—Å: {query}")
        print(f"{'='*70}")
        
        # === –®–ê–ì 1: LLM –ü–ê–†–°–ò–ù–ì –ó–ê–ü–†–û–°–ê ===
        if self.use_llm_parser and self.request_parser:
            print("\nü§ñ –®–∞–≥ 1: LLM –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –∑–∞–ø—Ä–æ—Å...")
            parsed_request = self.request_parser.parse_request(query)
            print(self.request_parser.format_result(parsed_request))
            items_to_search = parsed_request.get('items', [])
        else:
            # Fallback –Ω–∞ Query Enhancer
            print("\nüîç –®–∞–≥ 1: –≠–≤—Ä–∏—Å—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –∑–∞–ø—Ä–æ—Å–∞...")
            if self.query_enhancer:
                enhanced = self.query_enhancer.enhance_query(query)
                items_to_search = [
                    {"name": item, "quantity": 1, "specifications": "", "top_k": 3}
                    for item in enhanced
                ]
            else:
                items_to_search = [{"name": query, "quantity": 1, "specifications": "", "top_k": 3}]
        
        # === –®–ê–ì 2: –ü–û–ò–°–ö –ö–ê–ñ–î–û–ì–û –¢–û–í–ê–†–ê ===
        print(f"\nüîç –®–∞–≥ 2: –ü–æ–∏—Å–∫ —Ç–æ–≤–∞—Ä–æ–≤ ({len(items_to_search)} –ø–æ–∑–∏—Ü–∏–π)...")
        print("-" * 70)
        
        all_results = []
        total_cost = 0
        
        for i, item_spec in enumerate(items_to_search, 1):
            item_name = item_spec.get('name', '')
            quantity = item_spec.get('quantity', 1)
            specs = item_spec.get('specifications', '')
            top_k = item_spec.get('top_k', 3)  # –î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π top_k –æ—Ç LLM
            
            print(f"\n{i}. –ü–æ–∏—Å–∫: {item_name}")
            print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {quantity} —à—Ç.")
            print(f"   –ü–æ–∏—Å–∫ –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: {top_k}")
            
            # –ü–æ–∏—Å–∫ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î —Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º top_k
            search_results = self.search_engine.search(item_name, top_k=top_k)
            
            if search_results:
                # –ë–µ—Ä–µ–º –ª—É—á—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                best_product, best_score = search_results[0]
                
                unit_price = best_product.get('cost', 0)
                item_total = unit_price * quantity
                total_cost += item_total
                
                print(f"   ‚úì –ù–∞–π–¥–µ–Ω–æ: {best_product.get('name', 'N/A')[:60]}")
                print(f"   üí∞ –¶–µ–Ω–∞: {unit_price:,.0f} —Ä—É–±. √ó {quantity} = {item_total:,.0f} —Ä—É–±.")
                print(f"   üìä –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {best_score:.4f}")
                
                all_results.append({
                    "requested_item": item_name,
                    "quantity": quantity,
                    "found_product": best_product,
                    "relevance_score": float(best_score),
                    "unit_price": unit_price,
                    "total_price": item_total,
                    "specifications": specs,
                    "alternatives": [
                        {
                            "product": prod,
                            "score": float(score)
                        }
                        for prod, score in search_results[1:min(3, len(search_results))]
                    ]
                })
            else:
                print(f"   ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
                all_results.append({
                    "requested_item": item_name,
                    "quantity": quantity,
                    "found_product": None,
                    "relevance_score": 0,
                    "unit_price": 0,
                    "total_price": 0,
                    "specifications": specs,
                    "alternatives": []
                })
        
        # === –®–ê–ì 3: –§–û–†–ú–ò–†–û–í–ê–ù–ò–ï –û–¢–í–ï–¢–ê ===
        print(f"\n{'='*70}")
        print(f"üí∞ –ò–¢–û–ì–û–í–ê–Ø –°–¢–û–ò–ú–û–°–¢–¨: {total_cost:,.0f} —Ä—É–±.")
        print(f"{'='*70}")
        
        response = {
            "query_id": query_id,
            "original_query": query,
            "items": all_results,
            "total_items": len(items_to_search),
            "found_items": sum(1 for r in all_results if r['found_product'] is not None),
            "total_cost": total_cost,
            "currency": "RUB"
        }
        
        return response
        
        return all_results
