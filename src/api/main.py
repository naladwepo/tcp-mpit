"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG-–ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse, FileResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uvicorn
from pathlib import Path

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor
from src.document_generator import DocumentGenerator

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö",
    description="API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG (Retrieval-Augmented Generation)",
    version="1.0.0"
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_dir = Path(__file__).parent.parent.parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
search_engine: Optional[VectorSearchEngine] = None
processor: Optional[HybridQueryProcessor] = None
products_loaded: bool = False
document_generator: Optional[DocumentGenerator] = None


# Pydantic –º–æ–¥–µ–ª–∏
class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫"""
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", example="–ö–æ–º–ø–ª–µ–∫—Ç: –∫–æ—Ä–æ–± 200x200, –∫—Ä—ã—à–∫–∞, 4 –≤–∏–Ω—Ç–∞ –ú6")
    use_llm: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ –∑–∞–ø—Ä–æ—Å–∞")


class ProductInfo(BaseModel):
    """–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –Ω–∞–π–¥–µ–Ω–Ω–æ–º —Ç–æ–≤–∞—Ä–µ"""
    id: int
    name: str
    cost: float
    category: str


class SearchResultItem(BaseModel):
    """–≠–ª–µ–º–µ–Ω—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ–∏—Å–∫–∞"""
    requested_item: str
    quantity: int
    found_product: Optional[ProductInfo]
    relevance_score: float
    unit_price: float
    total_price: float
    specifications: str
    alternatives: List[Dict[str, Any]] = []


class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫"""
    query_id: Optional[int]
    original_query: str
    items: List[SearchResultItem]
    total_items: int
    found_items: int
    total_cost: float
    currency: str


class HealthResponse(BaseModel):
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    status: str
    models_loaded: bool
    products_count: int
    embedding_model: str
    llm_available: bool


class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    detail: str
    error_type: str


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global search_engine, processor, products_loaded, document_generator
    
    print("=" * 70)
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG API...")
    print("=" * 70)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö...")
        data_loader = DataLoader()
        products_df = data_loader.get_products()
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products_df)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        embedding_model = "intfloat/multilingual-e5-small"
        index_dir = "data/index_e5"
        
        search_engine = VectorSearchEngine(
            model_name=embedding_model,
            index_dir=index_dir
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        if not search_engine.load_index():
            print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
            search_engine.build_index(products_df)
            print("‚úì –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            print("‚úì –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
        
        # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)...")
        processor = HybridQueryProcessor(
            search_engine=search_engine,
            use_llm_parser=True,  # LLM –ø–∞—Ä—Å–µ—Ä –Ω–∞ –≤—Ö–æ–¥–µ —Å –∞–≤—Ç–æ–æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ–º CUDA/MPS/CPU
            use_fallback_enhancement=True
        )
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤
        print("üìÑ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤...")
        document_generator = DocumentGenerator(output_dir="generated_documents")
        
        products_loaded = True
        print("=" * 70)
        print("‚úÖ RAG API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üìä –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embedding_model}")
        print(f"üóÇÔ∏è  –ò–Ω–¥–µ–∫—Å: {index_dir}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(products_df)}")
        print(f"üìÑ –î–æ–∫—É–º–µ–Ω—Ç—ã: generated_documents/")
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        products_loaded = False


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –æ—Ç–¥–∞–µ–º HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    html_file = static_dir / "index.html"
    if html_file.exists():
        with open(html_file, 'r', encoding='utf-8') as f:
            return f.read()
    return """
    <html>
        <body>
            <h1>RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö API</h1>
            <p>Version: 1.0.0</p>
            <ul>
                <li><a href="/docs">API Documentation</a></li>
                <li><a href="/health">Health Check</a></li>
            </ul>
        </body>
    </html>
    """


@app.get("/api", response_model=Dict[str, str])
async def api_info():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "message": "RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    llm_available = processor and hasattr(processor, 'request_parser') and processor.request_parser is not None
    
    return HealthResponse(
        status="healthy" if products_loaded else "unhealthy",
        models_loaded=products_loaded,
        products_count=len(search_engine.products) if search_engine and search_engine.products else 0,
        embedding_model=search_engine.model_name if search_engine else "not loaded",
        llm_available=llm_available
    )


@app.post("/search", response_model=SearchResponse)
async def search(request: SearchRequest):
    """
    –ü–æ–∏—Å–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É (–Ω–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞)
    
    Pipeline:
    1. LLM –ø–∞—Ä—Å–∏—Ç –∑–∞–ø—Ä–æ—Å ‚Üí —Å–ø–∏—Å–æ–∫ —Ç–æ–≤–∞—Ä–æ–≤ + –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ + top_k (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏)
    2. –ü–æ–∏—Å–∫ –∫–∞–∂–¥–æ–≥–æ —Ç–æ–≤–∞—Ä–∞ –≤ –≤–µ–∫—Ç–æ—Ä–Ω–æ–π –ë–î (—Å –∏–Ω–¥–∏–≤–∏–¥—É–∞–ª—å–Ω—ã–º top_k)
    3. –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –∏ —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–≤–µ—Ç–∞
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ (–±–µ–∑ top_k - –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è LLM –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
    Returns:
        SearchResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏, –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    """
    if not products_loaded or not processor:
        raise HTTPException(
            status_code=503,
            detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É (top_k –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è LLM)
        result = processor.process_query(
            query=request.query
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç –≤ –Ω–æ–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        items_response = []
        for item in result.get('items', []):
            found_product = item.get('found_product')
            
            items_response.append(SearchResultItem(
                requested_item=item.get('requested_item', ''),
                quantity=item.get('quantity', 1),
                found_product=ProductInfo(
                    id=found_product.get('id', 0),
                    name=found_product.get('name', ''),
                    cost=found_product.get('cost', 0.0),
                    category=found_product.get('category', '')
                ) if found_product else None,
                relevance_score=item.get('relevance_score', 0.0),
                unit_price=item.get('unit_price', 0.0),
                total_price=item.get('total_price', 0.0),
                specifications=item.get('specifications', ''),
                alternatives=item.get('alternatives', [])
            ))
        
        return SearchResponse(
            query_id=result.get('query_id'),
            original_query=result.get('original_query', request.query),
            items=items_response,
            total_items=result.get('total_items', 0),
            found_items=result.get('found_items', 0),
            total_cost=result.get('total_cost', 0.0),
            currency=result.get('currency', 'RUB')
        )
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}"
        )


@app.get("/search", response_model=SearchResponse)
async def search_get(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", example="–ö–æ–º–ø–ª–µ–∫—Ç: –∫–æ—Ä–æ–± 200x200, –∫—Ä—ã—à–∫–∞, –≤–∏–Ω—Ç—ã"),
    use_llm: bool = Query(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å LLM –ø–∞—Ä—Å–µ—Ä")
):
    """
    GET —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    Args:
        q: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        use_llm: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ LLM –ø–∞—Ä—Å–µ—Ä (top_k –æ–ø—Ä–µ–¥–µ–ª—è–µ—Ç—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)
        
    Returns:
        SearchResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    request = SearchRequest(
        query=q,
        use_llm=use_llm
    )
    return await search(request)


@app.get("/products/count")
async def get_products_count():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"""
    if not products_loaded or not search_engine:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        "count": len(search_engine.products) if search_engine.products else 0
    }


@app.get("/products/categories")
async def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    if not products_loaded or not search_engine:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    try:
        categories = set()
        for product in search_engine.products:
            category = product.get('category')
            if category:
                categories.add(category)
        
        return {
            "categories": sorted(list(categories)),
            "count": len(categories)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@app.post("/generate/word")
async def generate_word_document(request: SearchRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–µ—Ö–Ω–∏–∫–æ-–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ Word (.docx)
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –¥–ª—è /search)
        
    Returns:
        FileResponse: Word –¥–æ–∫—É–º–µ–Ω—Ç
    """
    if not products_loaded or not processor or not document_generator:
        raise HTTPException(
            status_code=503,
            detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        result = processor.process_query(query=request.query)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        filepath = document_generator.generate_word(result)
        
        return FileResponse(
            path=str(filepath),
            filename=filepath.name,
            media_type="application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        )
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )


@app.post("/generate/pdf")
async def generate_pdf_document(request: SearchRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–µ—Ö–Ω–∏–∫–æ-–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ —Ñ–æ—Ä–º–∞—Ç–µ PDF
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –¥–ª—è /search)
        
    Returns:
        FileResponse: PDF –¥–æ–∫—É–º–µ–Ω—Ç
    """
    if not products_loaded or not processor or not document_generator:
        raise HTTPException(
            status_code=503,
            detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        result = processor.process_query(query=request.query)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç
        filepath = document_generator.generate_pdf(result)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º media type
        if filepath.suffix == '.pdf':
            media_type = "application/pdf"
        else:
            media_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
        
        return FileResponse(
            path=str(filepath),
            filename=filepath.name,
            media_type=media_type
        )
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞: {str(e)}"
        )


def format_search_result_as_string(result: Dict[str, Any]) -> str:
    """
    –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ —á–∏—Ç–∞–µ–º—É—é —Å—Ç—Ä–æ–∫—É
    
    Args:
        result: –†–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –æ—Ç –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞
        
    Returns:
        str: –û—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å—Ç—Ä–æ–∫–∞ —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
    """
    lines = []
    lines.append("=" * 70)
    lines.append("–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–û–ò–°–ö–ê")
    lines.append("=" * 70)
    lines.append("")
    
    # –ò—Å—Ö–æ–¥–Ω—ã–π –∑–∞–ø—Ä–æ—Å
    lines.append(f"–ó–∞–ø—Ä–æ—Å: {result.get('original_query', '–ù–µ —É–∫–∞–∑–∞–Ω')}")
    lines.append("")
    
    # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    lines.append(f"–í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ: {result.get('total_items', 0)}")
    lines.append(f"–ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.get('found_items', 0)}")
    lines.append(f"–û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('total_cost', 0):,.2f} {result.get('currency', 'RUB')}")
    lines.append("")
    
    # –¢–æ–≤–∞—Ä—ã
    lines.append("–ù–ê–ô–î–ï–ù–ù–´–ï –¢–û–í–ê–†–´:")
    lines.append("")
    
    for idx, item in enumerate(result.get('items', []), 1):
        product = item.get('found_product')
        
        lines.append(f"[{idx}] {item.get('requested_item', '–¢–æ–≤–∞—Ä')}")
        lines.append(f"    –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity', 1)} —à—Ç.")
        
        if product:
            lines.append(f"    –ù–∞–π–¥–µ–Ω–æ: {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')}")
            lines.append(f"    –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {product.get('category', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')}")
            lines.append(f"    –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {item.get('unit_price', 0):,.2f} ‚ÇΩ")
            lines.append(f"    –ò—Ç–æ–≥–æ: {item.get('total_price', 0):,.2f} ‚ÇΩ")
            lines.append(f"    –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item.get('relevance_score', 0):.4f}")
            
            # –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏–∏
            if item.get('specifications'):
                lines.append(f"    –°–ø–µ—Ü–∏—Ñ–∏–∫–∞—Ü–∏—è: {item.get('specifications')}")
            
            # –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤—ã
            alternatives = item.get('alternatives', [])
            if alternatives and len(alternatives) > 0:
                lines.append(f"    –ê–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤: {len(alternatives)}")
        else:
            lines.append("    ‚ùå –¢–æ–≤–∞—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        lines.append("")
    
    # –ò—Ç–æ–≥–∏
    lines.append("=" * 70)
    lines.append(f"–ò–¢–û–ì–û: {result.get('total_cost', 0):,.2f} {result.get('currency', 'RUB')}")
    lines.append("=" * 70)
    
    return "\n".join(lines)


@app.post("/generate/both")
async def generate_both_documents(request: SearchRequest):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –¢–µ—Ö–Ω–∏–∫–æ-–ö–æ–º–º–µ—Ä—á–µ—Å–∫–æ–µ –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ –≤ –æ–±–æ–∏—Ö —Ñ–æ—Ä–º–∞—Ç–∞—Ö (Word –∏ PDF)
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫ (—Ç–∞–∫–æ–π –∂–µ –∫–∞–∫ –¥–ª—è /search)
        
    Returns:
        Dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ —Å–æ–∑–¥–∞–Ω–Ω—ã—Ö –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ö + —Ä–µ–∑—É–ª—å—Ç–∞—Ç –ø–æ–∏—Å–∫–∞ –≤ –≤–∏–¥–µ —Å—Ç—Ä–æ–∫–∏
    """
    if not products_loaded or not processor or not document_generator:
        raise HTTPException(
            status_code=503,
            detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
        result = processor.process_query(query=request.query)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –¥–æ–∫—É–º–µ–Ω—Ç—ã
        files = document_generator.generate_both(result)
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –≤ —Å—Ç—Ä–æ–∫—É
        result_string = format_search_result_as_string(result)
        
        return {
            "message": "–î–æ–∫—É–º–µ–Ω—Ç—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã",
            "files": {
                "word": {
                    "filename": files['word'].name,
                    "path": str(files['word']),
                    "download_url": f"/download/{files['word'].name}"
                },
                "pdf": {
                    "filename": files['pdf'].name,
                    "path": str(files['pdf']),
                    "download_url": f"/download/{files['pdf'].name}"
                }
            },
            "search_result": result_string,
            "search_data": {
                "original_query": result.get('original_query'),
                "total_items": result.get('total_items', 0),
                "found_items": result.get('found_items', 0),
                "total_cost": result.get('total_cost', 0.0),
                "currency": result.get('currency', 'RUB')
            }
        }
        
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {str(e)}"
        )


@app.get("/download/{filename}")
async def download_document(filename: str):
    """
    –°–∫–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—ã–π –¥–æ–∫—É–º–µ–Ω—Ç
    
    Args:
        filename: –ò–º—è —Ñ–∞–π–ª–∞ –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è
        
    Returns:
        FileResponse: –§–∞–π–ª –¥–æ–∫—É–º–µ–Ω—Ç–∞
    """
    filepath = Path("generated_documents") / filename
    
    if not filepath.exists():
        raise HTTPException(status_code=404, detail="–§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º media type –ø–æ —Ä–∞—Å—à–∏—Ä–µ–Ω–∏—é
    if filepath.suffix == '.pdf':
        media_type = "application/pdf"
    elif filepath.suffix == '.docx':
        media_type = "application/vnd.openxmlformats-officedocument.wordprocessingml.document"
    else:
        media_type = "application/octet-stream"
    
    return FileResponse(
        path=str(filepath),
        filename=filename,
        media_type=media_type
    )


if __name__ == "__main__":
    uvicorn.run(
        "src.api.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
