"""
FastAPI –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–ª—è RAG-–ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö
"""

from fastapi import FastAPI, HTTPException, Query
from fastapi.middleware.cors import CORSMiddleware
from fastapi.staticfiles import StaticFiles
from fastapi.responses import HTMLResponse
from pydantic import BaseModel, Field
from typing import List, Optional, Dict, Any
import uvicorn
from pathlib import Path

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è FastAPI
app = FastAPI(
    title="RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö",
    description="API –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã—Ö –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º RAG (Retrieval-Augmented Generation)",
    version="1.0.0"
)

# –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ —Ñ–∞–π–ª—ã
static_dir = Path(__file__).parent.parent.parent / "static"
if static_dir.exists():
    app.mount("/static", StaticFiles(directory=str(static_dir)), name="static")

# CORS middleware
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–ª—è –º–æ–¥–µ–ª–µ–π
search_engine: Optional[VectorSearchEngine] = None
processor: Optional[HybridQueryProcessor] = None
products_loaded: bool = False


# Pydantic –º–æ–¥–µ–ª–∏
class SearchRequest(BaseModel):
    """–ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫"""
    query: str = Field(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", example="–ì–∞–π–∫–∞ –ú6")
    top_k: int = Field(10, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", ge=1, le=50)
    use_decomposition: bool = Field(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é –¥–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
    complexity: Optional[str] = Field(None, description="–°–ª–æ–∂–Ω–æ—Å—Ç—å –∑–∞–ø—Ä–æ—Å–∞ (simple/medium/complex)")


class FoundItem(BaseModel):
    """–ù–∞–π–¥–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä"""
    name: str
    cost: str


class SearchResponse(BaseModel):
    """–û—Ç–≤–µ—Ç –Ω–∞ –ø–æ–∏—Å–∫"""
    found_items: List[FoundItem]
    items_count: int
    total_cost: str
    query: str


class HealthResponse(BaseModel):
    """–°—Ç–∞—Ç—É—Å –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    status: str
    models_loaded: bool
    products_count: int
    embedding_model: str
    llm_available: bool


class ErrorResponse(BaseModel):
    """–û—Ç–≤–µ—Ç —Å –æ—à–∏–±–∫–æ–π"""
    detail: str
    error_type: str


@app.on_event("startup")
async def startup_event():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    global search_engine, processor, products_loaded
    
    print("=" * 70)
    print("üöÄ –ó–∞–ø—É—Å–∫ RAG API...")
    print("=" * 70)
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ
        print("üì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö...")
        data_loader = DataLoader()
        products_df = data_loader.get_products()
        print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤: {len(products_df)}")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≤–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫
        print("üîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
        embedding_model = "intfloat/multilingual-e5-small"
        index_dir = "data/index_e5"
        
        search_engine = VectorSearchEngine(
            model_name=embedding_model,
            index_dir=index_dir
        )
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∏–ª–∏ —Å–æ–∑–¥–∞–µ–º –∏–Ω–¥–µ–∫—Å
        if not search_engine.load_index():
            print("üî® –°–æ–∑–¥–∞–Ω–∏–µ –∏–Ω–¥–µ–∫—Å–∞ (—ç—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è)...")
            search_engine.build_index(products_df)
            print("‚úì –ò–Ω–¥–µ–∫—Å —Å–æ–∑–¥–∞–Ω –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω")
        else:
            print("‚úì –ò–Ω–¥–µ–∫—Å –∑–∞–≥—Ä—É–∂–µ–Ω –∏–∑ –∫—ç—à–∞")
        
        # –°–æ–∑–¥–∞–µ–º –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä —Å LLM
        print("ü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≥–∏–±—Ä–∏–¥–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞...")
        processor = HybridQueryProcessor(
            search_engine=search_engine,
            use_llm=True
        )
        
        products_loaded = True
        print("=" * 70)
        print("‚úÖ RAG API –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ!")
        print(f"üìä –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {embedding_model}")
        print(f"üóÇÔ∏è  –ò–Ω–¥–µ–∫—Å: {index_dir}")
        print(f"üì¶ –¢–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ: {len(products_df)}")
        print("=" * 70)
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        import traceback
        traceback.print_exc()
        products_loaded = False


@app.get("/", response_class=HTMLResponse)
async def root():
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç - –æ—Ç–¥–∞–µ–º HTML –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å"""
    html_file = static_dir / "index.html"
    if html_file.exists():
        with open(html_file, 'r', encoding='utf-8') as f:
            return f.read()
    return """
    <html>
        <body>
            <h1>RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö API</h1>
            <p>Version: 1.0.0</p>
            <ul>
                <li><a href="/docs">API Documentation</a></li>
                <li><a href="/health">Health Check</a></li>
            </ul>
        </body>
    </html>
    """


@app.get("/api", response_model=Dict[str, str])
async def api_info():
    """API –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
    return {
        "message": "RAG –ü–æ–∏—Å–∫ –ö–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö API",
        "version": "1.0.0",
        "docs": "/docs",
        "health": "/health"
    }


@app.get("/health", response_model=HealthResponse)
async def health_check():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è —Å–∏—Å—Ç–µ–º—ã"""
    llm_available = processor and processor.preprocessor and processor.preprocessor.model is not None
    
    return HealthResponse(
        status="healthy" if products_loaded else "unhealthy",
        models_loaded=products_loaded,
        products_count=len(search_engine.products) if search_engine and search_engine.products else 0,
        embedding_model=search_engine.model_name if search_engine else "not loaded",
        llm_available=llm_available
    )


@app.post("/search", response_model=SearchResponse)
async def search(request: SearchRequest):
    """
    –ü–æ–∏—Å–∫ –∫–æ–º–ø–ª–µ–∫—Ç—É—é—â–∏—Ö –ø–æ –∑–∞–ø—Ä–æ—Å—É
    
    Args:
        request: –ó–∞–ø—Ä–æ—Å –Ω–∞ –ø–æ–∏—Å–∫
        
    Returns:
        SearchResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞ —Å —Ç–æ–≤–∞—Ä–∞–º–∏ –∏ —Å—Ç–æ–∏–º–æ—Å—Ç—å—é
    """
    if not products_loaded or not processor:
        raise HTTPException(
            status_code=503,
            detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )
    
    try:
        # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫ —á–µ—Ä–µ–∑ –≥–∏–±—Ä–∏–¥–Ω—ã–π –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä
        result = processor.process_query(
            query=request.query,
            top_k=request.top_k,
            use_decomposition=request.use_decomposition,
            complexity=request.complexity
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response_data = result.get('response', {})
        
        return SearchResponse(
            found_items=[
                FoundItem(name=item['name'], cost=item['cost'])
                for item in response_data.get('found_items', [])
            ],
            items_count=response_data.get('items_count', 0),
            total_cost=response_data.get('total_cost', '0 —Ä—É–±.'),
            query=request.query
        )
        
    except Exception as e:
        raise HTTPException(
            status_code=500,
            detail=f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –ø–æ–∏—Å–∫–∞: {str(e)}"
        )


@app.get("/search", response_model=SearchResponse)
async def search_get(
    q: str = Query(..., description="–ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å", example="–ì–∞–π–∫–∞ –ú6"),
    top_k: int = Query(10, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤", ge=1, le=50),
    decompose: bool = Query(True, description="–ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é")
):
    """
    GET —ç–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø–æ–∏—Å–∫–∞ (–¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    
    Args:
        q: –ü–æ–∏—Å–∫–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        top_k: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        decompose: –ò—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –ª–∏ –¥–µ–∫–æ–º–ø–æ–∑–∏—Ü–∏—é
        
    Returns:
        SearchResponse: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞
    """
    request = SearchRequest(
        query=q,
        top_k=top_k,
        use_decomposition=decompose
    )
    return await search(request)


@app.get("/products/count")
async def get_products_count():
    """–ü–æ–ª—É—á–∏—Ç—å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –±–∞–∑–µ"""
    if not products_loaded or not search_engine:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    return {
        "count": len(search_engine.products) if search_engine.products else 0
    }


@app.get("/products/categories")
async def get_categories():
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–∞—Ç–µ–≥–æ—Ä–∏–π —Ç–æ–≤–∞—Ä–æ–≤"""
    if not products_loaded or not search_engine:
        raise HTTPException(status_code=503, detail="–°–∏—Å—Ç–µ–º–∞ –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞")
    
    try:
        categories = set()
        for product in search_engine.products:
            category = product.get('category')
            if category:
                categories.add(category)
        
        return {
            "categories": sorted(list(categories)),
            "count": len(categories)
        }
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


if __name__ == "__main__":
    uvicorn.run(
        "src.api.main:app",
        host="0.0.0.0",
        port=8000,
        reload=True
    )
