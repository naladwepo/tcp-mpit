"""
–¢–µ—Å—Ç LLM-—Ä–µ–∂–∏–º–∞ —Å –æ–¥–Ω–∏–º –ø—Ä–æ—Å—Ç—ã–º –∑–∞–ø—Ä–æ—Å–æ–º
"""

from src.data_loader import DataLoader
from src.search_engine import VectorSearchEngine
from src.hybrid_processor import HybridQueryProcessor
import time


def test_llm_mode_single_query():
    """
    –¢–µ—Å—Ç–∏—Ä—É–µ—Ç LLM-—Ä–µ–∂–∏–º –Ω–∞ –æ–¥–Ω–æ–º –ø—Ä–æ—Å—Ç–æ–º –∑–∞–ø—Ä–æ—Å–µ
    """
    print("=" * 70)
    print("üöÄ –¢–ï–°–¢ LLM-–†–ï–ñ–ò–ú–ê (–æ–¥–∏–Ω –∑–∞–ø—Ä–æ—Å)")
    print("=" * 70)
    
    # –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
    print("\nüì¶ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
    data_loader = DataLoader()
    products = data_loader.get_products()
    print(f"‚úì –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(products)} —Ç–æ–≤–∞—Ä–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞
    print("\nüîç –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –≤–µ–∫—Ç–æ—Ä–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞...")
    search_engine = VectorSearchEngine(
        model_name="intfloat/multilingual-e5-small",
        index_dir="data/index_e5"
    )
    search_engine.build_index(products)
    print("‚úì –í–µ–∫—Ç–æ—Ä–Ω—ã–π –ø–æ–∏—Å–∫ –≥–æ—Ç–æ–≤")
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å LLM
    print("\nü§ñ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø—Ä–æ—Ü–µ—Å—Å–æ—Ä–∞ —Å LLM...")
    start_init = time.time()
    processor = HybridQueryProcessor(
        search_engine=search_engine,
        use_llm=True,  # ‚úÖ LLM-—Ä–µ–∂–∏–º
        use_query_enhancement=True,
        use_llm_validator=True,
        use_iterative_search=False
    )
    init_time = time.time() - start_init
    print(f"‚úì –ü—Ä–æ—Ü–µ—Å—Å–æ—Ä –≥–æ—Ç–æ–≤ (–∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}s)")
    
    # –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    query = "–ö–æ—Ä–æ–± 200x200"
    
    print("\n" + "=" * 70)
    print(f"üìã –ó–ê–ü–†–û–°: {query}")
    print("=" * 70)
    
    start_query = time.time()
    result = processor.process_query(
        query=query,
        top_k=3,  # –ú–∞–ª–æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
        complexity="medium",
        query_id=1,
        use_validation=True
    )
    query_time = time.time() - start_query
    
    print("\n" + "=" * 70)
    print(f"üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ (–≤—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: {query_time:.2f}s)")
    print("=" * 70)
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç –≤–∞–ª–∏–¥–∞—Ü–∏–∏
    if 'validation' in result and result['validation']:
        validation = result['validation']
        print(f"\n‚úÖ –í–ê–õ–ò–î–ê–¶–ò–Ø:")
        print(f"   –†–µ–∂–∏–º: {validation.get('mode', 'unknown')}")
        print(f"   –ú–µ—Ç–æ–¥: {validation.get('method', 'N/A')}")
        print(f"   –ù–∞–π–¥–µ–Ω–æ –ø–æ–∑–∏—Ü–∏–π: {len(validation.get('items', []))}")
        
        if 'items' in validation:
            print("\n   üì¶ –î–µ—Ç–∞–ª–∏–∑–∞—Ü–∏—è:")
            for item in validation['items']:
                name = item.get('name', 'N/A')
                quantity = item.get('quantity', 0)
                unit_price = item.get('unit_price', 0)
                total = item.get('total_cost', 0)
                print(f"\n     - {name[:60]}")
                print(f"       –ö–æ–ª-–≤–æ: {quantity} | –¶–µ–Ω–∞: {unit_price:,.0f} —Ä—É–±. | –ò—Ç–æ–≥–æ: {total:,.0f} —Ä—É–±.")
        
        total_cost = validation.get('total_cost', 0)
        confidence = validation.get('confidence', 0)
        print(f"\n   üí∞ –ò–¢–û–ì–û: {total_cost:,.0f} —Ä—É–±.")
        print(f"   üéØ –£–≤–µ—Ä–µ–Ω–Ω–æ—Å—Ç—å: {confidence * 100:.0f}%")
    
    print("\n" + "=" * 70)
    print(f"‚è±Ô∏è –í–†–ï–ú–Ø:")
    print(f"   –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è: {init_time:.2f}s")
    print(f"   –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {query_time:.2f}s")
    print(f"   –í—Å–µ–≥–æ: {init_time + query_time:.2f}s")
    print("=" * 70)


if __name__ == "__main__":
    test_llm_mode_single_query()
