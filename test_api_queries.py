#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ñ–∞–π–ª—ã –∑–∞–ø—Ä–æ—Å–æ–≤
–¢–µ—Å—Ç–∏—Ä—É–µ—Ç —ç–Ω–¥–ø–æ–∏–Ω—Ç /search —Å –∑–∞–ø—Ä–æ—Å–∞–º–∏ –∏–∑ JSON —Ñ–∞–π–ª–æ–≤
"""

import json
import requests
import time
from pathlib import Path
from typing import Dict, Any, List
from colorama import init, Fore, Style
import sys

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è colorama –¥–ª—è —Ü–≤–µ—Ç–Ω–æ–≥–æ –≤—ã–≤–æ–¥–∞
init(autoreset=True)

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
API_BASE_URL = "http://localhost:8000"
QUERY_FILES = [
    "query_1_simple.json",
    "query_2_simple.json",
    "query_4_medium.json",
    "query_5_medium.json",
    "query_8_complex.json"
]


class APITester:
    """–ö–ª–∞—Å—Å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è API"""
    
    def __init__(self, base_url: str = API_BASE_URL):
        self.base_url = base_url
        self.results = []
        
    def check_health(self) -> bool:
        """–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–¥–æ—Ä–æ–≤—å—è API"""
        try:
            response = requests.get(f"{self.base_url}/health", timeout=5)
            if response.status_code == 200:
                health_data = response.json()
                print(f"{Fore.GREEN}‚úì API –¥–æ—Å—Ç—É–ø–µ–Ω")
                print(f"  –°—Ç–∞—Ç—É—Å: {health_data.get('status')}")
                print(f"  –ú–æ–¥–µ–ª–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {health_data.get('models_loaded')}")
                print(f"  –ü—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {health_data.get('products_count')}")
                print(f"  –ú–æ–¥–µ–ª—å —ç–º–±–µ–¥–¥–∏–Ω–≥–æ–≤: {health_data.get('embedding_model')}")
                print(f"  LLM –¥–æ—Å—Ç—É–ø–µ–Ω: {health_data.get('llm_available')}")
                return health_data.get('status') == 'healthy'
            else:
                print(f"{Fore.RED}‚úó API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}")
                return False
        except requests.exceptions.ConnectionError:
            print(f"{Fore.RED}‚úó –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ API –Ω–∞ {self.base_url}")
            print(f"{Fore.YELLOW}  –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ —Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω: uvicorn src.api.main:app --reload")
            return False
        except Exception as e:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ health: {e}")
            return False
    
    def load_query_file(self, filename: str) -> Dict[str, Any]:
        """–ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–∞–π–ª–∞ —Å –∑–∞–ø—Ä–æ—Å–æ–º"""
        filepath = Path(filename)
        if not filepath.exists():
            raise FileNotFoundError(f"–§–∞–π–ª {filename} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        with open(filepath, 'r', encoding='utf-8') as f:
            return json.load(f)
    
    def search(self, query: str, use_llm: bool = True) -> Dict[str, Any]:
        """–í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –ø–æ–∏—Å–∫–∞ —á–µ—Ä–µ–∑ API"""
        url = f"{self.base_url}/search"
        payload = {
            "query": query,
            "use_llm": use_llm
        }
        
        response = requests.post(url, json=payload, timeout=60)
        response.raise_for_status()
        return response.json()
    
    def compare_results(self, expected: Dict, actual: Dict) -> Dict[str, Any]:
        """–°—Ä–∞–≤–Ω–µ–Ω–∏–µ –æ–∂–∏–¥–∞–µ–º—ã—Ö –∏ —Ñ–∞–∫—Ç–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
        comparison = {
            "query_match": False,
            "items_count_match": False,
            "found_items_match": False,
            "differences": []
        }
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å
        expected_query = expected.get('query', '')
        actual_query = actual.get('original_query', '')
        comparison["query_match"] = expected_query.lower() == actual_query.lower()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        expected_count = expected.get('response', {}).get('items_count', 0)
        actual_count = actual.get('found_items', 0)
        comparison["items_count_match"] = expected_count == actual_count
        
        if not comparison["items_count_match"]:
            comparison["differences"].append(
                f"–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤: –æ–∂–∏–¥–∞–ª–æ—Å—å {expected_count}, –ø–æ–ª—É—á–µ–Ω–æ {actual_count}"
            )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Ç–æ–≤–∞—Ä–æ–≤
        expected_items = expected.get('response', {}).get('found_items', [])
        actual_items = actual.get('items', [])
        
        if len(expected_items) > 0 and len(actual_items) > 0:
            comparison["found_items_match"] = True
        
        return comparison
    
    def format_item(self, item: Dict[str, Any]) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞"""
        product = item.get('found_product')
        if not product:
            return f"  ‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω–æ: {item.get('requested_item', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}"
        
        lines = [
            f"  üì¶ {item.get('requested_item', '–¢–æ–≤–∞—Ä')}",
            f"     –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ: {item.get('quantity', 1)} —à—Ç.",
            f"     –ù–∞–π–¥–µ–Ω–æ: {product.get('name', '–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è')[:80]}...",
            f"     –¶–µ–Ω–∞ –∑–∞ –µ–¥.: {item.get('unit_price', 0):.2f} —Ä—É–±.",
            f"     –ò—Ç–æ–≥–æ: {item.get('total_price', 0):.2f} —Ä—É–±.",
            f"     –†–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å: {item.get('relevance_score', 0):.4f}"
        ]
        return "\n".join(lines)
    
    def test_query_file(self, filename: str) -> Dict[str, Any]:
        """–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–¥–Ω–æ–≥–æ —Ñ–∞–π–ª–∞ –∑–∞–ø—Ä–æ—Å–∞"""
        print(f"\n{Fore.CYAN}{'=' * 70}")
        print(f"{Fore.CYAN}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ: {filename}")
        print(f"{Fore.CYAN}{'=' * 70}")
        
        try:
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–∞–π–ª
            query_data = self.load_query_file(filename)
            query_id = query_data.get('id')
            complexity = query_data.get('complexity', 'unknown')
            query_text = query_data.get('query')
            
            print(f"{Fore.YELLOW}ID –∑–∞–ø—Ä–æ—Å–∞: {query_id}")
            print(f"{Fore.YELLOW}–°–ª–æ–∂–Ω–æ—Å—Ç—å: {complexity}")
            print(f"{Fore.YELLOW}–ó–∞–ø—Ä–æ—Å: {query_text}")
            
            # –í—ã–ø–æ–ª–Ω—è–µ–º –ø–æ–∏—Å–∫
            start_time = time.time()
            result = self.search(query_text)
            elapsed_time = time.time() - start_time
            
            print(f"\n{Fore.GREEN}‚úì –ü–æ–∏—Å–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω –∑–∞ {elapsed_time:.2f} —Å–µ–∫")
            
            # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
            print(f"\n{Fore.MAGENTA}–†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–∏—Å–∫–∞:")
            print(f"  –í—Å–µ–≥–æ —Ç–æ–≤–∞—Ä–æ–≤ –≤ –∑–∞–ø—Ä–æ—Å–µ: {result.get('total_items', 0)}")
            print(f"  –ù–∞–π–¥–µ–Ω–æ —Ç–æ–≤–∞—Ä–æ–≤: {result.get('found_items', 0)}")
            print(f"  –û–±—â–∞—è —Å—Ç–æ–∏–º–æ—Å—Ç—å: {result.get('total_cost', 0):.2f} {result.get('currency', 'RUB')}")
            
            print(f"\n{Fore.MAGENTA}–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã:")
            for idx, item in enumerate(result.get('items', []), 1):
                print(f"\n{Fore.WHITE}[{idx}]")
                print(self.format_item(item))
            
            # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏
            comparison = self.compare_results(query_data, result)
            
            print(f"\n{Fore.CYAN}–°—Ä–∞–≤–Ω–µ–Ω–∏–µ —Å –æ–∂–∏–¥–∞–µ–º—ã–º–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏:")
            if comparison["query_match"]:
                print(f"{Fore.GREEN}  ‚úì –ó–∞–ø—Ä–æ—Å —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            else:
                print(f"{Fore.RED}  ‚úó –ó–∞–ø—Ä–æ—Å –Ω–µ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            
            if comparison["items_count_match"]:
                print(f"{Fore.GREEN}  ‚úì –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ —Å–æ–≤–ø–∞–¥–∞–µ—Ç")
            else:
                print(f"{Fore.YELLOW}  ‚ö† –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –æ—Ç–ª–∏—á–∞–µ—Ç—Å—è")
            
            for diff in comparison["differences"]:
                print(f"{Fore.YELLOW}  ‚ö† {diff}")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            test_result = {
                "filename": filename,
                "query_id": query_id,
                "complexity": complexity,
                "query": query_text,
                "execution_time": elapsed_time,
                "result": result,
                "comparison": comparison,
                "success": True
            }
            
            self.results.append(test_result)
            return test_result
            
        except FileNotFoundError as e:
            print(f"{Fore.RED}‚úó –û—à–∏–±–∫–∞: {e}")
            self.results.append({
                "filename": filename,
                "success": False,
                "error": str(e)
            })
            return {"success": False, "error": str(e)}
            
        except requests.exceptions.HTTPError as e:
            print(f"{Fore.RED}‚úó HTTP –æ—à–∏–±–∫–∞: {e}")
            print(f"{Fore.RED}  –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞: {e.response.text if hasattr(e, 'response') else 'N/A'}")
            self.results.append({
                "filename": filename,
                "success": False,
                "error": str(e)
            })
            return {"success": False, "error": str(e)}
            
        except Exception as e:
            print(f"{Fore.RED}‚úó –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞: {e}")
            import traceback
            traceback.print_exc()
            self.results.append({
                "filename": filename,
                "success": False,
                "error": str(e)
            })
            return {"success": False, "error": str(e)}
    
    def save_results(self, output_file: str = "api_test_results.json"):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
        output_path = Path(output_file)
        with open(output_path, 'w', encoding='utf-8') as f:
            json.dump(self.results, f, ensure_ascii=False, indent=2)
        print(f"\n{Fore.GREEN}‚úì –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {output_file}")
    
    def print_summary(self):
        """–í—ã–≤–æ–¥ –∏—Ç–æ–≥–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏"""
        print(f"\n{Fore.CYAN}{'=' * 70}")
        print(f"{Fore.CYAN}–ò–¢–û–ì–û–í–ê–Ø –°–¢–ê–¢–ò–°–¢–ò–ö–ê")
        print(f"{Fore.CYAN}{'=' * 70}")
        
        total = len(self.results)
        successful = sum(1 for r in self.results if r.get('success', False))
        failed = total - successful
        
        print(f"\n{Fore.WHITE}–í—Å–µ–≥–æ —Ç–µ—Å—Ç–æ–≤: {total}")
        print(f"{Fore.GREEN}–£—Å–ø–µ—à–Ω—ã—Ö: {successful}")
        print(f"{Fore.RED}–ù–µ—É–¥–∞—á–Ω—ã—Ö: {failed}")
        
        if successful > 0:
            avg_time = sum(r.get('execution_time', 0) for r in self.results if r.get('success')) / successful
            print(f"{Fore.YELLOW}–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è: {avg_time:.2f} —Å–µ–∫")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
        complexity_stats = {}
        for r in self.results:
            if r.get('success'):
                complexity = r.get('complexity', 'unknown')
                if complexity not in complexity_stats:
                    complexity_stats[complexity] = {'count': 0, 'total_time': 0}
                complexity_stats[complexity]['count'] += 1
                complexity_stats[complexity]['total_time'] += r.get('execution_time', 0)
        
        if complexity_stats:
            print(f"\n{Fore.MAGENTA}–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏:")
            for complexity, stats in sorted(complexity_stats.items()):
                avg = stats['total_time'] / stats['count']
                print(f"  {complexity}: {stats['count']} —Ç–µ—Å—Ç–æ–≤, —Å—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è {avg:.2f} —Å–µ–∫")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print(f"{Fore.CYAN}{Style.BRIGHT}")
    print("=" * 70)
    print("  –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–ï API –ü–û–ò–°–ö–ê –ö–û–ú–ü–õ–ï–ö–¢–£–Æ–©–ò–•")
    print("=" * 70)
    print(Style.RESET_ALL)
    
    # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–µ—Ä
    tester = APITester()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å API
    print(f"\n{Fore.YELLOW}–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ API...")
    if not tester.check_health():
        print(f"\n{Fore.RED}API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞.")
        sys.exit(1)
    
    # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    print(f"\n{Fore.YELLOW}–ë—É–¥—É—Ç –ø—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω—ã —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã:")
    for idx, filename in enumerate(QUERY_FILES, 1):
        print(f"  {idx}. {filename}")
    
    response = input(f"\n{Fore.CYAN}–ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ? (y/n): {Style.RESET_ALL}")
    if response.lower() not in ['y', 'yes', '–¥', '–¥–∞']:
        print(f"{Fore.YELLOW}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")
        sys.exit(0)
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª
    for filename in QUERY_FILES:
        tester.test_query_file(filename)
        time.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
    
    # –í—ã–≤–æ–¥–∏–º –∏—Ç–æ–≥–æ–≤—É—é —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    tester.print_summary()
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
    tester.save_results()
    
    print(f"\n{Fore.GREEN}{Style.BRIGHT}–¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!{Style.RESET_ALL}\n")


if __name__ == "__main__":
    main()
